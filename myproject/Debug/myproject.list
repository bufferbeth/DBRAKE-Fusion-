
myproject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a54  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003be8  08003be8  00013be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003c28  08003c28  00013c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003c2c  08003c2c  00013c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08003c30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000164  2000000c  08003c3c  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000170  08003c3c  00020170  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   000110cf  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002338  00000000  00000000  0003110b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000f50  00000000  00000000  00033448  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000e18  00000000  00000000  00034398  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000075a7  00000000  00000000  000351b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004d90  00000000  00000000  0003c757  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000414e7  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00003f2c  00000000  00000000  00041564  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003bd0 	.word	0x08003bd0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003bd0 	.word	0x08003bd0

080001d4 <LedTask>:
// FUNCTION:  LedTask
//------------------------------------------------------------------------------
//  
//==============================================================================
void LedTask(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
  uint8_t currentAppState,done; 
  uint16_t currentAppEvent; 
  
  currentAppState = AppStateGet();
 80001da:	f000 f981 	bl	80004e0 <AppStateGet>
 80001de:	4603      	mov	r3, r0
 80001e0:	71fb      	strb	r3, [r7, #7]
  
  ledToggle = 0;
 80001e2:	4b31      	ldr	r3, [pc, #196]	; (80002a8 <LedTask+0xd4>)
 80001e4:	2200      	movs	r2, #0
 80001e6:	701a      	strb	r2, [r3, #0]
  switch(currentAppState)
 80001e8:	79fb      	ldrb	r3, [r7, #7]
 80001ea:	2b01      	cmp	r3, #1
 80001ec:	d002      	beq.n	80001f4 <LedTask+0x20>
 80001ee:	2b02      	cmp	r3, #2
 80001f0:	d022      	beq.n	8000238 <LedTask+0x64>
 80001f2:	e043      	b.n	800027c <LedTask+0xa8>
  {
    case APPSTATE_TESTFORWARD:
    {
        if (ledToggle ==0)
 80001f4:	4b2c      	ldr	r3, [pc, #176]	; (80002a8 <LedTask+0xd4>)
 80001f6:	781b      	ldrb	r3, [r3, #0]
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d113      	bne.n	8000224 <LedTask+0x50>
        {
          ledToggle = 1; 
 80001fc:	4b2a      	ldr	r3, [pc, #168]	; (80002a8 <LedTask+0xd4>)
 80001fe:	2201      	movs	r2, #1
 8000200:	701a      	strb	r2, [r3, #0]
          LED_BLUE;
 8000202:	2201      	movs	r2, #1
 8000204:	2180      	movs	r1, #128	; 0x80
 8000206:	4829      	ldr	r0, [pc, #164]	; (80002ac <LedTask+0xd8>)
 8000208:	f002 f934 	bl	8002474 <HAL_GPIO_WritePin>
 800020c:	2201      	movs	r2, #1
 800020e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000212:	4826      	ldr	r0, [pc, #152]	; (80002ac <LedTask+0xd8>)
 8000214:	f002 f92e 	bl	8002474 <HAL_GPIO_WritePin>
 8000218:	2200      	movs	r2, #0
 800021a:	2140      	movs	r1, #64	; 0x40
 800021c:	4823      	ldr	r0, [pc, #140]	; (80002ac <LedTask+0xd8>)
 800021e:	f002 f929 	bl	8002474 <HAL_GPIO_WritePin>
        else
        {
          ledToggle = 0; 
          LED_ALL_OFF;
        }      
        break;
 8000222:	e03c      	b.n	800029e <LedTask+0xca>
          ledToggle = 0; 
 8000224:	4b20      	ldr	r3, [pc, #128]	; (80002a8 <LedTask+0xd4>)
 8000226:	2200      	movs	r2, #0
 8000228:	701a      	strb	r2, [r3, #0]
          LED_ALL_OFF;
 800022a:	2201      	movs	r2, #1
 800022c:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8000230:	481e      	ldr	r0, [pc, #120]	; (80002ac <LedTask+0xd8>)
 8000232:	f002 f91f 	bl	8002474 <HAL_GPIO_WritePin>
        break;
 8000236:	e032      	b.n	800029e <LedTask+0xca>
    }
    case APPSTATE_TESTREVERSE:
    {
        if (ledToggle ==0)
 8000238:	4b1b      	ldr	r3, [pc, #108]	; (80002a8 <LedTask+0xd4>)
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	2b00      	cmp	r3, #0
 800023e:	d113      	bne.n	8000268 <LedTask+0x94>
        {
          ledToggle = 1; 
 8000240:	4b19      	ldr	r3, [pc, #100]	; (80002a8 <LedTask+0xd4>)
 8000242:	2201      	movs	r2, #1
 8000244:	701a      	strb	r2, [r3, #0]
          LED_RED;
 8000246:	2200      	movs	r2, #0
 8000248:	2180      	movs	r1, #128	; 0x80
 800024a:	4818      	ldr	r0, [pc, #96]	; (80002ac <LedTask+0xd8>)
 800024c:	f002 f912 	bl	8002474 <HAL_GPIO_WritePin>
 8000250:	2201      	movs	r2, #1
 8000252:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000256:	4815      	ldr	r0, [pc, #84]	; (80002ac <LedTask+0xd8>)
 8000258:	f002 f90c 	bl	8002474 <HAL_GPIO_WritePin>
 800025c:	2201      	movs	r2, #1
 800025e:	2140      	movs	r1, #64	; 0x40
 8000260:	4812      	ldr	r0, [pc, #72]	; (80002ac <LedTask+0xd8>)
 8000262:	f002 f907 	bl	8002474 <HAL_GPIO_WritePin>
        else
        {
          ledToggle = 0; 
          LED_ALL_OFF;
        }            
      break;
 8000266:	e01a      	b.n	800029e <LedTask+0xca>
          ledToggle = 0; 
 8000268:	4b0f      	ldr	r3, [pc, #60]	; (80002a8 <LedTask+0xd4>)
 800026a:	2200      	movs	r2, #0
 800026c:	701a      	strb	r2, [r3, #0]
          LED_ALL_OFF;
 800026e:	2201      	movs	r2, #1
 8000270:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8000274:	480d      	ldr	r0, [pc, #52]	; (80002ac <LedTask+0xd8>)
 8000276:	f002 f8fd 	bl	8002474 <HAL_GPIO_WritePin>
      break;
 800027a:	e010      	b.n	800029e <LedTask+0xca>
    }
    default:
    {
    	LED_VIOLET;
 800027c:	2200      	movs	r2, #0
 800027e:	2180      	movs	r1, #128	; 0x80
 8000280:	480a      	ldr	r0, [pc, #40]	; (80002ac <LedTask+0xd8>)
 8000282:	f002 f8f7 	bl	8002474 <HAL_GPIO_WritePin>
 8000286:	2201      	movs	r2, #1
 8000288:	f44f 7180 	mov.w	r1, #256	; 0x100
 800028c:	4807      	ldr	r0, [pc, #28]	; (80002ac <LedTask+0xd8>)
 800028e:	f002 f8f1 	bl	8002474 <HAL_GPIO_WritePin>
 8000292:	2200      	movs	r2, #0
 8000294:	2140      	movs	r1, #64	; 0x40
 8000296:	4805      	ldr	r0, [pc, #20]	; (80002ac <LedTask+0xd8>)
 8000298:	f002 f8ec 	bl	8002474 <HAL_GPIO_WritePin>
    	break;
 800029c:	bf00      	nop
    }
  }
}
 800029e:	bf00      	nop
 80002a0:	3708      	adds	r7, #8
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	20000028 	.word	0x20000028
 80002ac:	48000800 	.word	0x48000800

080002b0 <BrakeInit>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
void BrakeInit(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
	motorOn = FALSE;
 80002b4:	4b05      	ldr	r3, [pc, #20]	; (80002cc <BrakeInit+0x1c>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	701a      	strb	r2, [r3, #0]
	action = NONE;
 80002ba:	4b05      	ldr	r3, [pc, #20]	; (80002d0 <BrakeInit+0x20>)
 80002bc:	2200      	movs	r2, #0
 80002be:	701a      	strb	r2, [r3, #0]

	MotorOff(1);
 80002c0:	2001      	movs	r0, #1
 80002c2:	f000 f807 	bl	80002d4 <MotorOff>
}
 80002c6:	bf00      	nop
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	2000002b 	.word	0x2000002b
 80002d0:	2000002a 	.word	0x2000002a

080002d4 <MotorOff>:
// FUNCTION:   MotorOff
//------------------------------------------------------------------------------
// This function Initializes registers to allow button interrupts
//==============================================================================
void MotorOff(uint8_t useHoldOff)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b088      	sub	sp, #32
 80002d8:	af00      	add	r7, sp, #0
 80002da:	4603      	mov	r3, r0
 80002dc:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002de:	f107 030c 	add.w	r3, r7, #12
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]
 80002ec:	611a      	str	r2, [r3, #16]
  
	motorOn = FALSE; 
 80002ee:	4b2a      	ldr	r3, [pc, #168]	; (8000398 <MotorOff+0xc4>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	701a      	strb	r2, [r3, #0]
//	motorRunTime = 0;
	
	HAL_GPIO_WritePin(GPIOC, PIN_C4_ENA|PIN_C5_INA,GPIO_PIN_RESET);
 80002f4:	2200      	movs	r2, #0
 80002f6:	2130      	movs	r1, #48	; 0x30
 80002f8:	4828      	ldr	r0, [pc, #160]	; (800039c <MotorOff+0xc8>)
 80002fa:	f002 f8bb 	bl	8002474 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = PIN_C4_ENA|PIN_C5_INA;
 80002fe:	2330      	movs	r3, #48	; 0x30
 8000300:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000302:	2301      	movs	r3, #1
 8000304:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000306:	2300      	movs	r3, #0
 8000308:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800030a:	2300      	movs	r3, #0
 800030c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800030e:	f107 030c 	add.w	r3, r7, #12
 8000312:	4619      	mov	r1, r3
 8000314:	4821      	ldr	r0, [pc, #132]	; (800039c <MotorOff+0xc8>)
 8000316:	f001 ff1b 	bl	8002150 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOB, PIN_B11_ENB|PIN_B0_INB,GPIO_PIN_RESET);
 800031a:	2200      	movs	r2, #0
 800031c:	f640 0101 	movw	r1, #2049	; 0x801
 8000320:	481f      	ldr	r0, [pc, #124]	; (80003a0 <MotorOff+0xcc>)
 8000322:	f002 f8a7 	bl	8002474 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = PIN_B11_ENB|PIN_B0_INB;
 8000326:	f640 0301 	movw	r3, #2049	; 0x801
 800032a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800032c:	2301      	movs	r3, #1
 800032e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000330:	2300      	movs	r3, #0
 8000332:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000334:	2300      	movs	r3, #0
 8000336:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000338:	f107 030c 	add.w	r3, r7, #12
 800033c:	4619      	mov	r1, r3
 800033e:	4818      	ldr	r0, [pc, #96]	; (80003a0 <MotorOff+0xcc>)
 8000340:	f001 ff06 	bl	8002150 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOB, PIN_B10_PWM,GPIO_PIN_SET);
 8000344:	2201      	movs	r2, #1
 8000346:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800034a:	4815      	ldr	r0, [pc, #84]	; (80003a0 <MotorOff+0xcc>)
 800034c:	f002 f892 	bl	8002474 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = PIN_B10_PWM;
 8000350:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000354:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000356:	2301      	movs	r3, #1
 8000358:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800035a:	2300      	movs	r3, #0
 800035c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800035e:	2300      	movs	r3, #0
 8000360:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000362:	f107 030c 	add.w	r3, r7, #12
 8000366:	4619      	mov	r1, r3
 8000368:	480d      	ldr	r0, [pc, #52]	; (80003a0 <MotorOff+0xcc>)
 800036a:	f001 fef1 	bl	8002150 <HAL_GPIO_Init>


	GPIO_InitStruct.Pin = PIN_B1_CS;
 800036e:	2302      	movs	r3, #2
 8000370:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000372:	2300      	movs	r3, #0
 8000374:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000376:	2300      	movs	r3, #0
 8000378:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800037a:	2300      	movs	r3, #0
 800037c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800037e:	f107 030c 	add.w	r3, r7, #12
 8000382:	4619      	mov	r1, r3
 8000384:	4806      	ldr	r0, [pc, #24]	; (80003a0 <MotorOff+0xcc>)
 8000386:	f001 fee3 	bl	8002150 <HAL_GPIO_Init>

	action = NONE; 
 800038a:	4b06      	ldr	r3, [pc, #24]	; (80003a4 <MotorOff+0xd0>)
 800038c:	2200      	movs	r2, #0
 800038e:	701a      	strb	r2, [r3, #0]
	if (useHoldOff != 0)
	{
//		BrakeHoldOff(100);
	}
}
 8000390:	bf00      	nop
 8000392:	3720      	adds	r7, #32
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	2000002b 	.word	0x2000002b
 800039c:	48000800 	.word	0x48000800
 80003a0:	48000400 	.word	0x48000400
 80003a4:	2000002a 	.word	0x2000002a

080003a8 <MotorCCW>:
// FUNCTION:   MotorCW
//------------------------------------------------------------------------------
// This function
//==============================================================================
void MotorCCW(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b086      	sub	sp, #24
 80003ac:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ae:	1d3b      	adds	r3, r7, #4
 80003b0:	2200      	movs	r2, #0
 80003b2:	601a      	str	r2, [r3, #0]
 80003b4:	605a      	str	r2, [r3, #4]
 80003b6:	609a      	str	r2, [r3, #8]
 80003b8:	60da      	str	r2, [r3, #12]
 80003ba:	611a      	str	r2, [r3, #16]
	
	motorOn = TRUE; 
 80003bc:	4b15      	ldr	r3, [pc, #84]	; (8000414 <MotorCCW+0x6c>)
 80003be:	2201      	movs	r2, #1
 80003c0:	701a      	strb	r2, [r3, #0]
	maxCurrentRead = 0; 
	maxFSRRead = 0;  //V01_41
	encoderCount = 0;
	buildTableOffset = 0;	
*/
	HAL_GPIO_WritePin(GPIOC, PIN_C5_INA,GPIO_PIN_RESET);
 80003c2:	2200      	movs	r2, #0
 80003c4:	2120      	movs	r1, #32
 80003c6:	4814      	ldr	r0, [pc, #80]	; (8000418 <MotorCCW+0x70>)
 80003c8:	f002 f854 	bl	8002474 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, PIN_B0_INB,GPIO_PIN_SET);
 80003cc:	2201      	movs	r2, #1
 80003ce:	2101      	movs	r1, #1
 80003d0:	4812      	ldr	r0, [pc, #72]	; (800041c <MotorCCW+0x74>)
 80003d2:	f002 f84f 	bl	8002474 <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = PIN_C4_ENA;
 80003d6:	2310      	movs	r3, #16
 80003d8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003da:	2300      	movs	r3, #0
 80003dc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003de:	2300      	movs	r3, #0
 80003e0:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	4619      	mov	r1, r3
 80003e6:	480c      	ldr	r0, [pc, #48]	; (8000418 <MotorCCW+0x70>)
 80003e8:	f001 feb2 	bl	8002150 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = PIN_B11_ENB;
 80003ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80003f0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003f2:	2300      	movs	r3, #0
 80003f4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f6:	2300      	movs	r3, #0
 80003f8:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	4619      	mov	r1, r3
 80003fe:	4807      	ldr	r0, [pc, #28]	; (800041c <MotorCCW+0x74>)
 8000400:	f001 fea6 	bl	8002150 <HAL_GPIO_Init>

	action = RETRACTING; 
 8000404:	4b06      	ldr	r3, [pc, #24]	; (8000420 <MotorCCW+0x78>)
 8000406:	2202      	movs	r2, #2
 8000408:	701a      	strb	r2, [r3, #0]
/*
	prevEncoderCount = encoderCount; //01_38_#3
	actionEncoderSample = 0; //01_38_#3
	prevAction = action; 
*/
}
 800040a:	bf00      	nop
 800040c:	3718      	adds	r7, #24
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	2000002b 	.word	0x2000002b
 8000418:	48000800 	.word	0x48000800
 800041c:	48000400 	.word	0x48000400
 8000420:	2000002a 	.word	0x2000002a

08000424 <MotorCW>:
// FUNCTION:   MotorCW
//------------------------------------------------------------------------------
// This function  
//==============================================================================
void MotorCW(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b086      	sub	sp, #24
 8000428:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800042a:	1d3b      	adds	r3, r7, #4
 800042c:	2200      	movs	r2, #0
 800042e:	601a      	str	r2, [r3, #0]
 8000430:	605a      	str	r2, [r3, #4]
 8000432:	609a      	str	r2, [r3, #8]
 8000434:	60da      	str	r2, [r3, #12]
 8000436:	611a      	str	r2, [r3, #16]


	motorOn = TRUE; 
 8000438:	4b15      	ldr	r3, [pc, #84]	; (8000490 <MotorCW+0x6c>)
 800043a:	2201      	movs	r2, #1
 800043c:	701a      	strb	r2, [r3, #0]
	encoderCount = 0;	
	encoderFlip = 0; 
	buildTableOffset = 0;
	encoderTableOffset = 0; 
*/
	HAL_GPIO_WritePin(GPIOC, PIN_C5_INA,GPIO_PIN_SET);
 800043e:	2201      	movs	r2, #1
 8000440:	2120      	movs	r1, #32
 8000442:	4814      	ldr	r0, [pc, #80]	; (8000494 <MotorCW+0x70>)
 8000444:	f002 f816 	bl	8002474 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, PIN_B0_INB,GPIO_PIN_RESET);
 8000448:	2200      	movs	r2, #0
 800044a:	2101      	movs	r1, #1
 800044c:	4812      	ldr	r0, [pc, #72]	; (8000498 <MotorCW+0x74>)
 800044e:	f002 f811 	bl	8002474 <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = PIN_C4_ENA;
 8000452:	2310      	movs	r3, #16
 8000454:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000456:	2300      	movs	r3, #0
 8000458:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045a:	2300      	movs	r3, #0
 800045c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800045e:	1d3b      	adds	r3, r7, #4
 8000460:	4619      	mov	r1, r3
 8000462:	480c      	ldr	r0, [pc, #48]	; (8000494 <MotorCW+0x70>)
 8000464:	f001 fe74 	bl	8002150 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = PIN_B11_ENB;
 8000468:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800046c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800046e:	2300      	movs	r3, #0
 8000470:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000472:	2300      	movs	r3, #0
 8000474:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000476:	1d3b      	adds	r3, r7, #4
 8000478:	4619      	mov	r1, r3
 800047a:	4807      	ldr	r0, [pc, #28]	; (8000498 <MotorCW+0x74>)
 800047c:	f001 fe68 	bl	8002150 <HAL_GPIO_Init>


	action = EXTENDING; 
 8000480:	4b06      	ldr	r3, [pc, #24]	; (800049c <MotorCW+0x78>)
 8000482:	2201      	movs	r2, #1
 8000484:	701a      	strb	r2, [r3, #0]
	homeLimit = HOME_OUT;
	prevEncoderCount = encoderCount; //01_38_#3
	actionEncoderSample = 0; //01_38_#3
	prevAction = action; 
*/
}
 8000486:	bf00      	nop
 8000488:	3718      	adds	r7, #24
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	2000002b 	.word	0x2000002b
 8000494:	48000800 	.word	0x48000800
 8000498:	48000400 	.word	0x48000400
 800049c:	2000002a 	.word	0x2000002a

080004a0 <AppStateInit>:
// FUNCTION:  AppStateInit
//------------------------------------------------------------------------------
//  
//==============================================================================
void AppStateInit(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b086      	sub	sp, #24
 80004a4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a6:	1d3b      	adds	r3, r7, #4
 80004a8:	2200      	movs	r2, #0
 80004aa:	601a      	str	r2, [r3, #0]
 80004ac:	605a      	str	r2, [r3, #4]
 80004ae:	609a      	str	r2, [r3, #8]
 80004b0:	60da      	str	r2, [r3, #12]
 80004b2:	611a      	str	r2, [r3, #16]
	appState =  APPSTATE_IDLE;
 80004b4:	4b08      	ldr	r3, [pc, #32]	; (80004d8 <AppStateInit+0x38>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	701a      	strb	r2, [r3, #0]

	GPIO_InitStruct.Pin = PIN_C2_LRVSTOPLTAD|PIN_C3_RRVSTOPLTAD;
 80004ba:	230c      	movs	r3, #12
 80004bc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004be:	2300      	movs	r3, #0
 80004c0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c2:	2300      	movs	r3, #0
 80004c4:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004c6:	1d3b      	adds	r3, r7, #4
 80004c8:	4619      	mov	r1, r3
 80004ca:	4804      	ldr	r0, [pc, #16]	; (80004dc <AppStateInit+0x3c>)
 80004cc:	f001 fe40 	bl	8002150 <HAL_GPIO_Init>
}
 80004d0:	bf00      	nop
 80004d2:	3718      	adds	r7, #24
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	20000029 	.word	0x20000029
 80004dc:	48000800 	.word	0x48000800

080004e0 <AppStateGet>:


uint8_t AppStateGet(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
	return appState;
 80004e4:	4b03      	ldr	r3, [pc, #12]	; (80004f4 <AppStateGet+0x14>)
 80004e6:	781b      	ldrb	r3, [r3, #0]
}
 80004e8:	4618      	mov	r0, r3
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	20000029 	.word	0x20000029

080004f8 <AppTask>:

void AppTask(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
	short int inputRead1,inputRead2;
	inputRead1 = HAL_GPIO_ReadPin(GPIOC,PIN_C2_LRVSTOPLTAD);
 80004fe:	2104      	movs	r1, #4
 8000500:	4822      	ldr	r0, [pc, #136]	; (800058c <AppTask+0x94>)
 8000502:	f001 ff9f 	bl	8002444 <HAL_GPIO_ReadPin>
 8000506:	4603      	mov	r3, r0
 8000508:	80fb      	strh	r3, [r7, #6]
	inputRead2 = HAL_GPIO_ReadPin(GPIOC,PIN_C3_RRVSTOPLTAD);
 800050a:	2108      	movs	r1, #8
 800050c:	481f      	ldr	r0, [pc, #124]	; (800058c <AppTask+0x94>)
 800050e:	f001 ff99 	bl	8002444 <HAL_GPIO_ReadPin>
 8000512:	4603      	mov	r3, r0
 8000514:	80bb      	strh	r3, [r7, #4]

	if (inputRead1 != 0)
 8000516:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800051a:	2b00      	cmp	r3, #0
 800051c:	d011      	beq.n	8000542 <AppTask+0x4a>
	{
		appState = APPSTATE_TESTFORWARD;
 800051e:	4b1c      	ldr	r3, [pc, #112]	; (8000590 <AppTask+0x98>)
 8000520:	2201      	movs	r2, #1
 8000522:	701a      	strb	r2, [r3, #0]
		if(action != EXTENDING)
 8000524:	4b1b      	ldr	r3, [pc, #108]	; (8000594 <AppTask+0x9c>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	2b01      	cmp	r3, #1
 800052a:	d02a      	beq.n	8000582 <AppTask+0x8a>
		{
			if (motorOn != FALSE)
 800052c:	4b1a      	ldr	r3, [pc, #104]	; (8000598 <AppTask+0xa0>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d003      	beq.n	800053c <AppTask+0x44>
			{
				MotorOff(1);
 8000534:	2001      	movs	r0, #1
 8000536:	f7ff fecd 	bl	80002d4 <MotorOff>
		}
	}



}
 800053a:	e022      	b.n	8000582 <AppTask+0x8a>
				MotorCW();
 800053c:	f7ff ff72 	bl	8000424 <MotorCW>
}
 8000540:	e01f      	b.n	8000582 <AppTask+0x8a>
		if (inputRead2 != 0)
 8000542:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d011      	beq.n	800056e <AppTask+0x76>
			appState = APPSTATE_TESTREVERSE;
 800054a:	4b11      	ldr	r3, [pc, #68]	; (8000590 <AppTask+0x98>)
 800054c:	2202      	movs	r2, #2
 800054e:	701a      	strb	r2, [r3, #0]
			if(action != RETRACTING)
 8000550:	4b10      	ldr	r3, [pc, #64]	; (8000594 <AppTask+0x9c>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	2b02      	cmp	r3, #2
 8000556:	d014      	beq.n	8000582 <AppTask+0x8a>
				if (motorOn != FALSE)
 8000558:	4b0f      	ldr	r3, [pc, #60]	; (8000598 <AppTask+0xa0>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d003      	beq.n	8000568 <AppTask+0x70>
					MotorOff(1);
 8000560:	2001      	movs	r0, #1
 8000562:	f7ff feb7 	bl	80002d4 <MotorOff>
}
 8000566:	e00c      	b.n	8000582 <AppTask+0x8a>
					MotorCCW();
 8000568:	f7ff ff1e 	bl	80003a8 <MotorCCW>
}
 800056c:	e009      	b.n	8000582 <AppTask+0x8a>
			appState = APPSTATE_IDLE;
 800056e:	4b08      	ldr	r3, [pc, #32]	; (8000590 <AppTask+0x98>)
 8000570:	2200      	movs	r2, #0
 8000572:	701a      	strb	r2, [r3, #0]
			if (motorOn != FALSE)
 8000574:	4b08      	ldr	r3, [pc, #32]	; (8000598 <AppTask+0xa0>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d002      	beq.n	8000582 <AppTask+0x8a>
				MotorOff(1);
 800057c:	2001      	movs	r0, #1
 800057e:	f7ff fea9 	bl	80002d4 <MotorOff>
}
 8000582:	bf00      	nop
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	48000800 	.word	0x48000800
 8000590:	20000029 	.word	0x20000029
 8000594:	2000002a 	.word	0x2000002a
 8000598:	2000002b 	.word	0x2000002b

0800059c <ButtonInit>:
// FUNCTION:   ButtonInit
//------------------------------------------------------------------------------
// This function Initializes registers to allow button interrupts
//==============================================================================
void ButtonInit(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
	port_pin_set_config(BUTTON_POWER, &pin_conf);
	port_pin_set_config(INPUT_BREAKAWAY_RING, &pin_conf);	
	port_pin_set_config(INPUT_BREAKAWAY_TIP, &pin_conf);		
#endif
*/
}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr

080005aa <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005aa:	b580      	push	{r7, lr}
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ae:	f000 fc6f 	bl	8000e90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b2:	f000 f815 	bl	80005e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b6:	f000 f9ab 	bl	8000910 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005ba:	f000 f891 	bl	80006e0 <MX_ADC1_Init>
  MX_CAN1_Init();
 80005be:	f000 f8f3 	bl	80007a8 <MX_CAN1_Init>
  MX_I2C1_Init();
 80005c2:	f000 f927 	bl	8000814 <MX_I2C1_Init>
  MX_SPI1_Init();
 80005c6:	f000 f965 	bl	8000894 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  ButtonInit();
 80005ca:	f7ff ffe7 	bl	800059c <ButtonInit>
  BrakeInit();
 80005ce:	f7ff fe6f 	bl	80002b0 <BrakeInit>
  AppStateInit();
 80005d2:	f7ff ff65 	bl	80004a0 <AppStateInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  AppTask();
 80005d6:	f7ff ff8f 	bl	80004f8 <AppTask>
	  LedTask();
 80005da:	f7ff fdfb 	bl	80001d4 <LedTask>
	  AppTask();
 80005de:	e7fa      	b.n	80005d6 <main+0x2c>

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b0b0      	sub	sp, #192	; 0xc0
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80005ea:	2244      	movs	r2, #68	; 0x44
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f003 fae6 	bl	8003bc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	2264      	movs	r2, #100	; 0x64
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f003 fad8 	bl	8003bc0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000610:	2301      	movs	r3, #1
 8000612:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000614:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000618:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061c:	2302      	movs	r3, #2
 800061e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000622:	2303      	movs	r3, #3
 8000624:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000628:	2302      	movs	r3, #2
 800062a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLN = 10;
 800062e:	230a      	movs	r3, #10
 8000630:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000634:	2307      	movs	r3, #7
 8000636:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800063a:	2302      	movs	r3, #2
 800063c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000640:	2302      	movs	r3, #2
 8000642:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000646:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800064a:	4618      	mov	r0, r3
 800064c:	f002 f8b4 	bl	80027b8 <HAL_RCC_OscConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000656:	f000 fa5b 	bl	8000b10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065a:	230f      	movs	r3, #15
 800065c:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065e:	2303      	movs	r3, #3
 8000660:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800066e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000672:	2103      	movs	r1, #3
 8000674:	4618      	mov	r0, r3
 8000676:	f002 fcbf 	bl	8002ff8 <HAL_RCC_ClockConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000680:	f000 fa46 	bl	8000b10 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC;
 8000684:	f244 0340 	movw	r3, #16448	; 0x4040
 8000688:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800068a:	2300      	movs	r3, #0
 800068c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800068e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000692:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000694:	2303      	movs	r3, #3
 8000696:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 8000698:	2302      	movs	r3, #2
 800069a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800069c:	2308      	movs	r3, #8
 800069e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80006a0:	2307      	movs	r3, #7
 80006a2:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80006a4:	2302      	movs	r3, #2
 80006a6:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80006ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80006b0:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	4618      	mov	r0, r3
 80006b6:	f002 fe6b 	bl	8003390 <HAL_RCCEx_PeriphCLKConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80006c0:	f000 fa26 	bl	8000b10 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006c4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006c8:	f002 f820 	bl	800270c <HAL_PWREx_ControlVoltageScaling>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80006d2:	f000 fa1d 	bl	8000b10 <Error_Handler>
  }
}
 80006d6:	bf00      	nop
 80006d8:	37c0      	adds	r7, #192	; 0xc0
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
	...

080006e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b086      	sub	sp, #24
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006e6:	463b      	mov	r3, r7
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]
 80006f4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80006f6:	4b29      	ldr	r3, [pc, #164]	; (800079c <MX_ADC1_Init+0xbc>)
 80006f8:	4a29      	ldr	r2, [pc, #164]	; (80007a0 <MX_ADC1_Init+0xc0>)
 80006fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006fc:	4b27      	ldr	r3, [pc, #156]	; (800079c <MX_ADC1_Init+0xbc>)
 80006fe:	2200      	movs	r2, #0
 8000700:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000702:	4b26      	ldr	r3, [pc, #152]	; (800079c <MX_ADC1_Init+0xbc>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000708:	4b24      	ldr	r3, [pc, #144]	; (800079c <MX_ADC1_Init+0xbc>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800070e:	4b23      	ldr	r3, [pc, #140]	; (800079c <MX_ADC1_Init+0xbc>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000714:	4b21      	ldr	r3, [pc, #132]	; (800079c <MX_ADC1_Init+0xbc>)
 8000716:	2204      	movs	r2, #4
 8000718:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800071a:	4b20      	ldr	r3, [pc, #128]	; (800079c <MX_ADC1_Init+0xbc>)
 800071c:	2200      	movs	r2, #0
 800071e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000720:	4b1e      	ldr	r3, [pc, #120]	; (800079c <MX_ADC1_Init+0xbc>)
 8000722:	2200      	movs	r2, #0
 8000724:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000726:	4b1d      	ldr	r3, [pc, #116]	; (800079c <MX_ADC1_Init+0xbc>)
 8000728:	2201      	movs	r2, #1
 800072a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800072c:	4b1b      	ldr	r3, [pc, #108]	; (800079c <MX_ADC1_Init+0xbc>)
 800072e:	2200      	movs	r2, #0
 8000730:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000734:	4b19      	ldr	r3, [pc, #100]	; (800079c <MX_ADC1_Init+0xbc>)
 8000736:	2200      	movs	r2, #0
 8000738:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800073a:	4b18      	ldr	r3, [pc, #96]	; (800079c <MX_ADC1_Init+0xbc>)
 800073c:	2200      	movs	r2, #0
 800073e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000740:	4b16      	ldr	r3, [pc, #88]	; (800079c <MX_ADC1_Init+0xbc>)
 8000742:	2200      	movs	r2, #0
 8000744:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000748:	4b14      	ldr	r3, [pc, #80]	; (800079c <MX_ADC1_Init+0xbc>)
 800074a:	2200      	movs	r2, #0
 800074c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <MX_ADC1_Init+0xbc>)
 8000750:	2200      	movs	r2, #0
 8000752:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000756:	4811      	ldr	r0, [pc, #68]	; (800079c <MX_ADC1_Init+0xbc>)
 8000758:	f000 fdae 	bl	80012b8 <HAL_ADC_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000762:	f000 f9d5 	bl	8000b10 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <MX_ADC1_Init+0xc4>)
 8000768:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800076a:	2306      	movs	r3, #6
 800076c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800076e:	2300      	movs	r3, #0
 8000770:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000772:	237f      	movs	r3, #127	; 0x7f
 8000774:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000776:	2304      	movs	r3, #4
 8000778:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077e:	463b      	mov	r3, r7
 8000780:	4619      	mov	r1, r3
 8000782:	4806      	ldr	r0, [pc, #24]	; (800079c <MX_ADC1_Init+0xbc>)
 8000784:	f000 fee2 	bl	800154c <HAL_ADC_ConfigChannel>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800078e:	f000 f9bf 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000792:	bf00      	nop
 8000794:	3718      	adds	r7, #24
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	20000078 	.word	0x20000078
 80007a0:	50040000 	.word	0x50040000
 80007a4:	1d500080 	.word	0x1d500080

080007a8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007ac:	4b17      	ldr	r3, [pc, #92]	; (800080c <MX_CAN1_Init+0x64>)
 80007ae:	4a18      	ldr	r2, [pc, #96]	; (8000810 <MX_CAN1_Init+0x68>)
 80007b0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80007b2:	4b16      	ldr	r3, [pc, #88]	; (800080c <MX_CAN1_Init+0x64>)
 80007b4:	2210      	movs	r2, #16
 80007b6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80007b8:	4b14      	ldr	r3, [pc, #80]	; (800080c <MX_CAN1_Init+0x64>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007be:	4b13      	ldr	r3, [pc, #76]	; (800080c <MX_CAN1_Init+0x64>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 80007c4:	4b11      	ldr	r3, [pc, #68]	; (800080c <MX_CAN1_Init+0x64>)
 80007c6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80007ca:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 80007cc:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MX_CAN1_Init+0x64>)
 80007ce:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80007d2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80007d4:	4b0d      	ldr	r3, [pc, #52]	; (800080c <MX_CAN1_Init+0x64>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80007da:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MX_CAN1_Init+0x64>)
 80007dc:	2200      	movs	r2, #0
 80007de:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80007e0:	4b0a      	ldr	r3, [pc, #40]	; (800080c <MX_CAN1_Init+0x64>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_CAN1_Init+0x64>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80007ec:	4b07      	ldr	r3, [pc, #28]	; (800080c <MX_CAN1_Init+0x64>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80007f2:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_CAN1_Init+0x64>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80007f8:	4804      	ldr	r0, [pc, #16]	; (800080c <MX_CAN1_Init+0x64>)
 80007fa:	f001 fa9f 	bl	8001d3c <HAL_CAN_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000804:	f000 f984 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20000144 	.word	0x20000144
 8000810:	40006400 	.word	0x40006400

08000814 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000818:	4b1b      	ldr	r3, [pc, #108]	; (8000888 <MX_I2C1_Init+0x74>)
 800081a:	4a1c      	ldr	r2, [pc, #112]	; (800088c <MX_I2C1_Init+0x78>)
 800081c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 800081e:	4b1a      	ldr	r3, [pc, #104]	; (8000888 <MX_I2C1_Init+0x74>)
 8000820:	4a1b      	ldr	r2, [pc, #108]	; (8000890 <MX_I2C1_Init+0x7c>)
 8000822:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000824:	4b18      	ldr	r3, [pc, #96]	; (8000888 <MX_I2C1_Init+0x74>)
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800082a:	4b17      	ldr	r3, [pc, #92]	; (8000888 <MX_I2C1_Init+0x74>)
 800082c:	2201      	movs	r2, #1
 800082e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000830:	4b15      	ldr	r3, [pc, #84]	; (8000888 <MX_I2C1_Init+0x74>)
 8000832:	2200      	movs	r2, #0
 8000834:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000836:	4b14      	ldr	r3, [pc, #80]	; (8000888 <MX_I2C1_Init+0x74>)
 8000838:	2200      	movs	r2, #0
 800083a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800083c:	4b12      	ldr	r3, [pc, #72]	; (8000888 <MX_I2C1_Init+0x74>)
 800083e:	2200      	movs	r2, #0
 8000840:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000842:	4b11      	ldr	r3, [pc, #68]	; (8000888 <MX_I2C1_Init+0x74>)
 8000844:	2200      	movs	r2, #0
 8000846:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000848:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <MX_I2C1_Init+0x74>)
 800084a:	2200      	movs	r2, #0
 800084c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800084e:	480e      	ldr	r0, [pc, #56]	; (8000888 <MX_I2C1_Init+0x74>)
 8000850:	f001 fe28 	bl	80024a4 <HAL_I2C_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800085a:	f000 f959 	bl	8000b10 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800085e:	2100      	movs	r1, #0
 8000860:	4809      	ldr	r0, [pc, #36]	; (8000888 <MX_I2C1_Init+0x74>)
 8000862:	f001 fead 	bl	80025c0 <HAL_I2CEx_ConfigAnalogFilter>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800086c:	f000 f950 	bl	8000b10 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000870:	2100      	movs	r1, #0
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_I2C1_Init+0x74>)
 8000874:	f001 feef 	bl	8002656 <HAL_I2CEx_ConfigDigitalFilter>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800087e:	f000 f947 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	2000002c 	.word	0x2000002c
 800088c:	40005400 	.word	0x40005400
 8000890:	00c0eaff 	.word	0x00c0eaff

08000894 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000898:	4b1b      	ldr	r3, [pc, #108]	; (8000908 <MX_SPI1_Init+0x74>)
 800089a:	4a1c      	ldr	r2, [pc, #112]	; (800090c <MX_SPI1_Init+0x78>)
 800089c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800089e:	4b1a      	ldr	r3, [pc, #104]	; (8000908 <MX_SPI1_Init+0x74>)
 80008a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008a6:	4b18      	ldr	r3, [pc, #96]	; (8000908 <MX_SPI1_Init+0x74>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008ac:	4b16      	ldr	r3, [pc, #88]	; (8000908 <MX_SPI1_Init+0x74>)
 80008ae:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80008b2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008b4:	4b14      	ldr	r3, [pc, #80]	; (8000908 <MX_SPI1_Init+0x74>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008ba:	4b13      	ldr	r3, [pc, #76]	; (8000908 <MX_SPI1_Init+0x74>)
 80008bc:	2200      	movs	r2, #0
 80008be:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008c0:	4b11      	ldr	r3, [pc, #68]	; (8000908 <MX_SPI1_Init+0x74>)
 80008c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008c6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008c8:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <MX_SPI1_Init+0x74>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008ce:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <MX_SPI1_Init+0x74>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008d4:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <MX_SPI1_Init+0x74>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008da:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <MX_SPI1_Init+0x74>)
 80008dc:	2200      	movs	r2, #0
 80008de:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80008e0:	4b09      	ldr	r3, [pc, #36]	; (8000908 <MX_SPI1_Init+0x74>)
 80008e2:	2207      	movs	r2, #7
 80008e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008e6:	4b08      	ldr	r3, [pc, #32]	; (8000908 <MX_SPI1_Init+0x74>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <MX_SPI1_Init+0x74>)
 80008ee:	2208      	movs	r2, #8
 80008f0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008f2:	4805      	ldr	r0, [pc, #20]	; (8000908 <MX_SPI1_Init+0x74>)
 80008f4:	f003 f874 	bl	80039e0 <HAL_SPI_Init>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80008fe:	f000 f907 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	200000e0 	.word	0x200000e0
 800090c:	40013000 	.word	0x40013000

08000910 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08a      	sub	sp, #40	; 0x28
 8000914:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000916:	f107 0314 	add.w	r3, r7, #20
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]
 8000920:	609a      	str	r2, [r3, #8]
 8000922:	60da      	str	r2, [r3, #12]
 8000924:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000926:	4a75      	ldr	r2, [pc, #468]	; (8000afc <MX_GPIO_Init+0x1ec>)
 8000928:	4b74      	ldr	r3, [pc, #464]	; (8000afc <MX_GPIO_Init+0x1ec>)
 800092a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092c:	f043 0304 	orr.w	r3, r3, #4
 8000930:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000932:	4b72      	ldr	r3, [pc, #456]	; (8000afc <MX_GPIO_Init+0x1ec>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000936:	f003 0304 	and.w	r3, r3, #4
 800093a:	613b      	str	r3, [r7, #16]
 800093c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800093e:	4a6f      	ldr	r2, [pc, #444]	; (8000afc <MX_GPIO_Init+0x1ec>)
 8000940:	4b6e      	ldr	r3, [pc, #440]	; (8000afc <MX_GPIO_Init+0x1ec>)
 8000942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000948:	64d3      	str	r3, [r2, #76]	; 0x4c
 800094a:	4b6c      	ldr	r3, [pc, #432]	; (8000afc <MX_GPIO_Init+0x1ec>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	4a69      	ldr	r2, [pc, #420]	; (8000afc <MX_GPIO_Init+0x1ec>)
 8000958:	4b68      	ldr	r3, [pc, #416]	; (8000afc <MX_GPIO_Init+0x1ec>)
 800095a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000962:	4b66      	ldr	r3, [pc, #408]	; (8000afc <MX_GPIO_Init+0x1ec>)
 8000964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096e:	4a63      	ldr	r2, [pc, #396]	; (8000afc <MX_GPIO_Init+0x1ec>)
 8000970:	4b62      	ldr	r3, [pc, #392]	; (8000afc <MX_GPIO_Init+0x1ec>)
 8000972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000974:	f043 0302 	orr.w	r3, r3, #2
 8000978:	64d3      	str	r3, [r2, #76]	; 0x4c
 800097a:	4b60      	ldr	r3, [pc, #384]	; (8000afc <MX_GPIO_Init+0x1ec>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097e:	f003 0302 	and.w	r3, r3, #2
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000986:	4a5d      	ldr	r2, [pc, #372]	; (8000afc <MX_GPIO_Init+0x1ec>)
 8000988:	4b5c      	ldr	r3, [pc, #368]	; (8000afc <MX_GPIO_Init+0x1ec>)
 800098a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098c:	f043 0308 	orr.w	r3, r3, #8
 8000990:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000992:	4b5a      	ldr	r3, [pc, #360]	; (8000afc <MX_GPIO_Init+0x1ec>)
 8000994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000996:	f003 0308 	and.w	r3, r3, #8
 800099a:	603b      	str	r3, [r7, #0]
 800099c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800099e:	2200      	movs	r2, #0
 80009a0:	f249 11f0 	movw	r1, #37360	; 0x91f0
 80009a4:	4856      	ldr	r0, [pc, #344]	; (8000b00 <MX_GPIO_Init+0x1f0>)
 80009a6:	f001 fd65 	bl	8002474 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_11
 80009aa:	2200      	movs	r2, #0
 80009ac:	f640 4111 	movw	r1, #3089	; 0xc11
 80009b0:	4854      	ldr	r0, [pc, #336]	; (8000b04 <MX_GPIO_Init+0x1f4>)
 80009b2:	f001 fd5f 	bl	8002474 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80009b6:	2200      	movs	r2, #0
 80009b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c0:	f001 fd58 	bl	8002474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80009c4:	2200      	movs	r2, #0
 80009c6:	2104      	movs	r1, #4
 80009c8:	484f      	ldr	r0, [pc, #316]	; (8000b08 <MX_GPIO_Init+0x1f8>)
 80009ca:	f001 fd53 	bl	8002474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80009ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	4619      	mov	r1, r3
 80009e2:	4847      	ldr	r0, [pc, #284]	; (8000b00 <MX_GPIO_Init+0x1f0>)
 80009e4:	f001 fbb4 	bl	8002150 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC15 PC4 PC5 PC6
                           PC7 PC8 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80009e8:	f249 13f0 	movw	r3, #37360	; 0x91f0
 80009ec:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ee:	2301      	movs	r3, #1
 80009f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f6:	2300      	movs	r3, #0
 80009f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009fa:	f107 0314 	add.w	r3, r7, #20
 80009fe:	4619      	mov	r1, r3
 8000a00:	483f      	ldr	r0, [pc, #252]	; (8000b00 <MX_GPIO_Init+0x1f0>)
 8000a02:	f001 fba5 	bl	8002150 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a06:	2308      	movs	r3, #8
 8000a08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a12:	f107 0314 	add.w	r3, r7, #20
 8000a16:	4619      	mov	r1, r3
 8000a18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a1c:	f001 fb98 	bl	8002150 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_11
 8000a20:	f640 4311 	movw	r3, #3089	; 0xc11
 8000a24:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a26:	2301      	movs	r3, #1
 8000a28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a32:	f107 0314 	add.w	r3, r7, #20
 8000a36:	4619      	mov	r1, r3
 8000a38:	4832      	ldr	r0, [pc, #200]	; (8000b04 <MX_GPIO_Init+0x1f4>)
 8000a3a:	f001 fb89 	bl	8002150 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a3e:	2304      	movs	r3, #4
 8000a40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a42:	2302      	movs	r3, #2
 8000a44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	4619      	mov	r1, r3
 8000a58:	482a      	ldr	r0, [pc, #168]	; (8000b04 <MX_GPIO_Init+0x1f4>)
 8000a5a:	f001 fb79 	bl	8002150 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_1;
 8000a5e:	f242 0302 	movw	r3, #8194	; 0x2002
 8000a62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a64:	2300      	movs	r3, #0
 8000a66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	4619      	mov	r1, r3
 8000a72:	4824      	ldr	r0, [pc, #144]	; (8000b04 <MX_GPIO_Init+0x1f4>)
 8000a74:	f001 fb6c 	bl	8002150 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a7e:	4b23      	ldr	r3, [pc, #140]	; (8000b0c <MX_GPIO_Init+0x1fc>)
 8000a80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a86:	f107 0314 	add.w	r3, r7, #20
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a90:	f001 fb5e 	bl	8002150 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000a94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa6:	f107 0314 	add.w	r3, r7, #20
 8000aaa:	4619      	mov	r1, r3
 8000aac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab0:	f001 fb4e 	bl	8002150 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000ab4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ab8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aba:	2302      	movs	r3, #2
 8000abc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ac6:	2307      	movs	r3, #7
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aca:	f107 0314 	add.w	r3, r7, #20
 8000ace:	4619      	mov	r1, r3
 8000ad0:	480b      	ldr	r0, [pc, #44]	; (8000b00 <MX_GPIO_Init+0x1f0>)
 8000ad2:	f001 fb3d 	bl	8002150 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ad6:	2304      	movs	r3, #4
 8000ad8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ada:	2301      	movs	r3, #1
 8000adc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ae6:	f107 0314 	add.w	r3, r7, #20
 8000aea:	4619      	mov	r1, r3
 8000aec:	4806      	ldr	r0, [pc, #24]	; (8000b08 <MX_GPIO_Init+0x1f8>)
 8000aee:	f001 fb2f 	bl	8002150 <HAL_GPIO_Init>

}
 8000af2:	bf00      	nop
 8000af4:	3728      	adds	r7, #40	; 0x28
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40021000 	.word	0x40021000
 8000b00:	48000800 	.word	0x48000800
 8000b04:	48000400 	.word	0x48000400
 8000b08:	48000c00 	.word	0x48000c00
 8000b0c:	10110000 	.word	0x10110000

08000b10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
	...

08000b20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b26:	4a12      	ldr	r2, [pc, #72]	; (8000b70 <HAL_MspInit+0x50>)
 8000b28:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <HAL_MspInit+0x50>)
 8000b2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	6613      	str	r3, [r2, #96]	; 0x60
 8000b32:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <HAL_MspInit+0x50>)
 8000b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3e:	4a0c      	ldr	r2, [pc, #48]	; (8000b70 <HAL_MspInit+0x50>)
 8000b40:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <HAL_MspInit+0x50>)
 8000b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b48:	6593      	str	r3, [r2, #88]	; 0x58
 8000b4a:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <HAL_MspInit+0x50>)
 8000b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b52:	603b      	str	r3, [r7, #0]
 8000b54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2100      	movs	r1, #0
 8000b5a:	2005      	movs	r0, #5
 8000b5c:	f001 fac1 	bl	80020e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000b60:	2005      	movs	r0, #5
 8000b62:	f001 fada 	bl	800211a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40021000 	.word	0x40021000

08000b74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08a      	sub	sp, #40	; 0x28
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a21      	ldr	r2, [pc, #132]	; (8000c18 <HAL_ADC_MspInit+0xa4>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d13c      	bne.n	8000c10 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000b96:	4a21      	ldr	r2, [pc, #132]	; (8000c1c <HAL_ADC_MspInit+0xa8>)
 8000b98:	4b20      	ldr	r3, [pc, #128]	; (8000c1c <HAL_ADC_MspInit+0xa8>)
 8000b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ba0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ba2:	4b1e      	ldr	r3, [pc, #120]	; (8000c1c <HAL_ADC_MspInit+0xa8>)
 8000ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000baa:	613b      	str	r3, [r7, #16]
 8000bac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bae:	4a1b      	ldr	r2, [pc, #108]	; (8000c1c <HAL_ADC_MspInit+0xa8>)
 8000bb0:	4b1a      	ldr	r3, [pc, #104]	; (8000c1c <HAL_ADC_MspInit+0xa8>)
 8000bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb4:	f043 0304 	orr.w	r3, r3, #4
 8000bb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bba:	4b18      	ldr	r3, [pc, #96]	; (8000c1c <HAL_ADC_MspInit+0xa8>)
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bbe:	f003 0304 	and.w	r3, r3, #4
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc6:	4a15      	ldr	r2, [pc, #84]	; (8000c1c <HAL_ADC_MspInit+0xa8>)
 8000bc8:	4b14      	ldr	r3, [pc, #80]	; (8000c1c <HAL_ADC_MspInit+0xa8>)
 8000bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bd2:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <HAL_ADC_MspInit+0xa8>)
 8000bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	60bb      	str	r3, [r7, #8]
 8000bdc:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> ADC1_IN4
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    PA2     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000bde:	230f      	movs	r3, #15
 8000be0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000be2:	230b      	movs	r3, #11
 8000be4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	4619      	mov	r1, r3
 8000bf0:	480b      	ldr	r0, [pc, #44]	; (8000c20 <HAL_ADC_MspInit+0xac>)
 8000bf2:	f001 faad 	bl	8002150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000bf6:	2307      	movs	r3, #7
 8000bf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000bfa:	230b      	movs	r3, #11
 8000bfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c02:	f107 0314 	add.w	r3, r7, #20
 8000c06:	4619      	mov	r1, r3
 8000c08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c0c:	f001 faa0 	bl	8002150 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c10:	bf00      	nop
 8000c12:	3728      	adds	r7, #40	; 0x28
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	50040000 	.word	0x50040000
 8000c1c:	40021000 	.word	0x40021000
 8000c20:	48000800 	.word	0x48000800

08000c24 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08a      	sub	sp, #40	; 0x28
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a18      	ldr	r2, [pc, #96]	; (8000ca4 <HAL_CAN_MspInit+0x80>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d129      	bne.n	8000c9a <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c46:	4a18      	ldr	r2, [pc, #96]	; (8000ca8 <HAL_CAN_MspInit+0x84>)
 8000c48:	4b17      	ldr	r3, [pc, #92]	; (8000ca8 <HAL_CAN_MspInit+0x84>)
 8000c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c4c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c50:	6593      	str	r3, [r2, #88]	; 0x58
 8000c52:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <HAL_CAN_MspInit+0x84>)
 8000c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c5a:	613b      	str	r3, [r7, #16]
 8000c5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5e:	4a12      	ldr	r2, [pc, #72]	; (8000ca8 <HAL_CAN_MspInit+0x84>)
 8000c60:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <HAL_CAN_MspInit+0x84>)
 8000c62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <HAL_CAN_MspInit+0x84>)
 8000c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000c76:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c84:	2303      	movs	r3, #3
 8000c86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000c88:	2309      	movs	r3, #9
 8000c8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	4619      	mov	r1, r3
 8000c92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c96:	f001 fa5b 	bl	8002150 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000c9a:	bf00      	nop
 8000c9c:	3728      	adds	r7, #40	; 0x28
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40006400 	.word	0x40006400
 8000ca8:	40021000 	.word	0x40021000

08000cac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08a      	sub	sp, #40	; 0x28
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a18      	ldr	r2, [pc, #96]	; (8000d2c <HAL_I2C_MspInit+0x80>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d129      	bne.n	8000d22 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cce:	4a18      	ldr	r2, [pc, #96]	; (8000d30 <HAL_I2C_MspInit+0x84>)
 8000cd0:	4b17      	ldr	r3, [pc, #92]	; (8000d30 <HAL_I2C_MspInit+0x84>)
 8000cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cda:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <HAL_I2C_MspInit+0x84>)
 8000cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	613b      	str	r3, [r7, #16]
 8000ce4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ce6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000cea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cec:	2312      	movs	r3, #18
 8000cee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cf8:	2304      	movs	r3, #4
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	4619      	mov	r1, r3
 8000d02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d06:	f001 fa23 	bl	8002150 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d0a:	4a09      	ldr	r2, [pc, #36]	; (8000d30 <HAL_I2C_MspInit+0x84>)
 8000d0c:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <HAL_I2C_MspInit+0x84>)
 8000d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d14:	6593      	str	r3, [r2, #88]	; 0x58
 8000d16:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <HAL_I2C_MspInit+0x84>)
 8000d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d22:	bf00      	nop
 8000d24:	3728      	adds	r7, #40	; 0x28
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40005400 	.word	0x40005400
 8000d30:	40021000 	.word	0x40021000

08000d34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08a      	sub	sp, #40	; 0x28
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a17      	ldr	r2, [pc, #92]	; (8000db0 <HAL_SPI_MspInit+0x7c>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d128      	bne.n	8000da8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d56:	4a17      	ldr	r2, [pc, #92]	; (8000db4 <HAL_SPI_MspInit+0x80>)
 8000d58:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <HAL_SPI_MspInit+0x80>)
 8000d5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d60:	6613      	str	r3, [r2, #96]	; 0x60
 8000d62:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <HAL_SPI_MspInit+0x80>)
 8000d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d6a:	613b      	str	r3, [r7, #16]
 8000d6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6e:	4a11      	ldr	r2, [pc, #68]	; (8000db4 <HAL_SPI_MspInit+0x80>)
 8000d70:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <HAL_SPI_MspInit+0x80>)
 8000d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d74:	f043 0301 	orr.w	r3, r3, #1
 8000d78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d7a:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <HAL_SPI_MspInit+0x80>)
 8000d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d86:	23f0      	movs	r3, #240	; 0xf0
 8000d88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d92:	2303      	movs	r3, #3
 8000d94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d96:	2305      	movs	r3, #5
 8000d98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9a:	f107 0314 	add.w	r3, r7, #20
 8000d9e:	4619      	mov	r1, r3
 8000da0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da4:	f001 f9d4 	bl	8002150 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000da8:	bf00      	nop
 8000daa:	3728      	adds	r7, #40	; 0x28
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40013000 	.word	0x40013000
 8000db4:	40021000 	.word	0x40021000

08000db8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr

08000dc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dca:	e7fe      	b.n	8000dca <HardFault_Handler+0x4>

08000dcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <MemManage_Handler+0x4>

08000dd2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dd6:	e7fe      	b.n	8000dd6 <BusFault_Handler+0x4>

08000dd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <UsageFault_Handler+0x4>

08000dde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e0c:	f000 f894 	bl	8000f38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e10:	bf00      	nop
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
	...

08000e24 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e28:	4a17      	ldr	r2, [pc, #92]	; (8000e88 <SystemInit+0x64>)
 8000e2a:	4b17      	ldr	r3, [pc, #92]	; (8000e88 <SystemInit+0x64>)
 8000e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000e38:	4a14      	ldr	r2, [pc, #80]	; (8000e8c <SystemInit+0x68>)
 8000e3a:	4b14      	ldr	r3, [pc, #80]	; (8000e8c <SystemInit+0x68>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f043 0301 	orr.w	r3, r3, #1
 8000e42:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000e44:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <SystemInit+0x68>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000e4a:	4a10      	ldr	r2, [pc, #64]	; (8000e8c <SystemInit+0x68>)
 8000e4c:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <SystemInit+0x68>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000e54:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000e58:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000e5a:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <SystemInit+0x68>)
 8000e5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e60:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e62:	4a0a      	ldr	r2, [pc, #40]	; (8000e8c <SystemInit+0x68>)
 8000e64:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <SystemInit+0x68>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e6c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000e6e:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <SystemInit+0x68>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e74:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <SystemInit+0x64>)
 8000e76:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e7a:	609a      	str	r2, [r3, #8]
#endif
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	e000ed00 	.word	0xe000ed00
 8000e8c:	40021000 	.word	0x40021000

08000e90 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e96:	2300      	movs	r3, #0
 8000e98:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e9a:	2003      	movs	r0, #3
 8000e9c:	f001 f916 	bl	80020cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ea0:	2000      	movs	r0, #0
 8000ea2:	f000 f80d 	bl	8000ec0 <HAL_InitTick>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d002      	beq.n	8000eb2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000eac:	2301      	movs	r3, #1
 8000eae:	71fb      	strb	r3, [r7, #7]
 8000eb0:	e001      	b.n	8000eb6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000eb2:	f7ff fe35 	bl	8000b20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ecc:	4b17      	ldr	r3, [pc, #92]	; (8000f2c <HAL_InitTick+0x6c>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d023      	beq.n	8000f1c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ed4:	4b16      	ldr	r3, [pc, #88]	; (8000f30 <HAL_InitTick+0x70>)
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	4b14      	ldr	r3, [pc, #80]	; (8000f2c <HAL_InitTick+0x6c>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	4619      	mov	r1, r3
 8000ede:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ee2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eea:	4618      	mov	r0, r3
 8000eec:	f001 f923 	bl	8002136 <HAL_SYSTICK_Config>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d10f      	bne.n	8000f16 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2b0f      	cmp	r3, #15
 8000efa:	d809      	bhi.n	8000f10 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000efc:	2200      	movs	r2, #0
 8000efe:	6879      	ldr	r1, [r7, #4]
 8000f00:	f04f 30ff 	mov.w	r0, #4294967295
 8000f04:	f001 f8ed 	bl	80020e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f08:	4a0a      	ldr	r2, [pc, #40]	; (8000f34 <HAL_InitTick+0x74>)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6013      	str	r3, [r2, #0]
 8000f0e:	e007      	b.n	8000f20 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f10:	2301      	movs	r3, #1
 8000f12:	73fb      	strb	r3, [r7, #15]
 8000f14:	e004      	b.n	8000f20 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	73fb      	strb	r3, [r7, #15]
 8000f1a:	e001      	b.n	8000f20 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000008 	.word	0x20000008
 8000f30:	20000000 	.word	0x20000000
 8000f34:	20000004 	.word	0x20000004

08000f38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <HAL_IncTick+0x20>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	461a      	mov	r2, r3
 8000f42:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <HAL_IncTick+0x24>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4413      	add	r3, r2
 8000f48:	4a04      	ldr	r2, [pc, #16]	; (8000f5c <HAL_IncTick+0x24>)
 8000f4a:	6013      	str	r3, [r2, #0]
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	20000008 	.word	0x20000008
 8000f5c:	2000016c 	.word	0x2000016c

08000f60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  return uwTick;
 8000f64:	4b03      	ldr	r3, [pc, #12]	; (8000f74 <HAL_GetTick+0x14>)
 8000f66:	681b      	ldr	r3, [r3, #0]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	2000016c 	.word	0x2000016c

08000f78 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	431a      	orrs	r2, r3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	609a      	str	r2, [r3, #8]
}
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	b083      	sub	sp, #12
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
 8000fa6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	431a      	orrs	r2, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b087      	sub	sp, #28
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
 8000fec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	3360      	adds	r3, #96	; 0x60
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	4413      	add	r3, r2
 8000ffa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	4b08      	ldr	r3, [pc, #32]	; (8001024 <LL_ADC_SetOffset+0x44>)
 8001002:	4013      	ands	r3, r2
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800100a:	683a      	ldr	r2, [r7, #0]
 800100c:	430a      	orrs	r2, r1
 800100e:	4313      	orrs	r3, r2
 8001010:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001018:	bf00      	nop
 800101a:	371c      	adds	r7, #28
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	03fff000 	.word	0x03fff000

08001028 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	3360      	adds	r3, #96	; 0x60
 8001036:	461a      	mov	r2, r3
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	4413      	add	r3, r2
 800103e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001048:	4618      	mov	r0, r3
 800104a:	3714      	adds	r7, #20
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001054:	b480      	push	{r7}
 8001056:	b087      	sub	sp, #28
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	3360      	adds	r3, #96	; 0x60
 8001064:	461a      	mov	r2, r3
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	4413      	add	r3, r2
 800106c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	431a      	orrs	r2, r3
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800107e:	bf00      	nop
 8001080:	371c      	adds	r7, #28
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800108a:	b480      	push	{r7}
 800108c:	b083      	sub	sp, #12
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
 8001092:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	695b      	ldr	r3, [r3, #20]
 8001098:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	431a      	orrs	r2, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	615a      	str	r2, [r3, #20]
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b087      	sub	sp, #28
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	3330      	adds	r3, #48	; 0x30
 80010c0:	461a      	mov	r2, r3
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	0a1b      	lsrs	r3, r3, #8
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	f003 030c 	and.w	r3, r3, #12
 80010cc:	4413      	add	r3, r2
 80010ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	f003 031f 	and.w	r3, r3, #31
 80010da:	211f      	movs	r1, #31
 80010dc:	fa01 f303 	lsl.w	r3, r1, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	401a      	ands	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	0e9b      	lsrs	r3, r3, #26
 80010e8:	f003 011f 	and.w	r1, r3, #31
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	f003 031f 	and.w	r3, r3, #31
 80010f2:	fa01 f303 	lsl.w	r3, r1, r3
 80010f6:	431a      	orrs	r2, r3
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80010fc:	bf00      	nop
 80010fe:	371c      	adds	r7, #28
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001108:	b480      	push	{r7}
 800110a:	b087      	sub	sp, #28
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	3314      	adds	r3, #20
 8001118:	461a      	mov	r2, r3
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	0e5b      	lsrs	r3, r3, #25
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	f003 0304 	and.w	r3, r3, #4
 8001124:	4413      	add	r3, r2
 8001126:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	0d1b      	lsrs	r3, r3, #20
 8001130:	f003 031f 	and.w	r3, r3, #31
 8001134:	2107      	movs	r1, #7
 8001136:	fa01 f303 	lsl.w	r3, r1, r3
 800113a:	43db      	mvns	r3, r3
 800113c:	401a      	ands	r2, r3
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	0d1b      	lsrs	r3, r3, #20
 8001142:	f003 031f 	and.w	r3, r3, #31
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	fa01 f303 	lsl.w	r3, r1, r3
 800114c:	431a      	orrs	r2, r3
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001152:	bf00      	nop
 8001154:	371c      	adds	r7, #28
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
	...

08001160 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001178:	43db      	mvns	r3, r3
 800117a:	401a      	ands	r2, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f003 0318 	and.w	r3, r3, #24
 8001182:	4908      	ldr	r1, [pc, #32]	; (80011a4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001184:	40d9      	lsrs	r1, r3
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	400b      	ands	r3, r1
 800118a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800118e:	431a      	orrs	r2, r3
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001196:	bf00      	nop
 8001198:	3714      	adds	r7, #20
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	0007ffff 	.word	0x0007ffff

080011a8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80011b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	6093      	str	r3, [r2, #8]
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80011dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80011e0:	d101      	bne.n	80011e6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80011e2:	2301      	movs	r3, #1
 80011e4:	e000      	b.n	80011e8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80011e6:	2300      	movs	r3, #0
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001204:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001208:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001230:	d101      	bne.n	8001236 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001232:	2301      	movs	r3, #1
 8001234:	e000      	b.n	8001238 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001236:	2300      	movs	r3, #0
}
 8001238:	4618      	mov	r0, r3
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	f003 0301 	and.w	r3, r3, #1
 8001254:	2b01      	cmp	r3, #1
 8001256:	d101      	bne.n	800125c <LL_ADC_IsEnabled+0x18>
 8001258:	2301      	movs	r3, #1
 800125a:	e000      	b.n	800125e <LL_ADC_IsEnabled+0x1a>
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800126a:	b480      	push	{r7}
 800126c:	b083      	sub	sp, #12
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	f003 0304 	and.w	r3, r3, #4
 800127a:	2b04      	cmp	r3, #4
 800127c:	d101      	bne.n	8001282 <LL_ADC_REG_IsConversionOngoing+0x18>
 800127e:	2301      	movs	r3, #1
 8001280:	e000      	b.n	8001284 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001282:	2300      	movs	r3, #0
}
 8001284:	4618      	mov	r0, r3
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	f003 0308 	and.w	r3, r3, #8
 80012a0:	2b08      	cmp	r3, #8
 80012a2:	d101      	bne.n	80012a8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80012a4:	2301      	movs	r3, #1
 80012a6:	e000      	b.n	80012aa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
	...

080012b8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b088      	sub	sp, #32
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012c0:	2300      	movs	r3, #0
 80012c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d101      	bne.n	80012d2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e12d      	b.n	800152e <HAL_ADC_Init+0x276>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	691b      	ldr	r3, [r3, #16]
 80012d6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d109      	bne.n	80012f4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff fc47 	bl	8000b74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2200      	movs	r2, #0
 80012ea:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff ff67 	bl	80011cc <LL_ADC_IsDeepPowerDownEnabled>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d004      	beq.n	800130e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff ff4d 	bl	80011a8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff ff82 	bl	800121c <LL_ADC_IsInternalRegulatorEnabled>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d113      	bne.n	8001346 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff ff66 	bl	80011f4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001328:	4b83      	ldr	r3, [pc, #524]	; (8001538 <HAL_ADC_Init+0x280>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	099b      	lsrs	r3, r3, #6
 800132e:	4a83      	ldr	r2, [pc, #524]	; (800153c <HAL_ADC_Init+0x284>)
 8001330:	fba2 2303 	umull	r2, r3, r2, r3
 8001334:	099b      	lsrs	r3, r3, #6
 8001336:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001338:	e002      	b.n	8001340 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	3b01      	subs	r3, #1
 800133e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1f9      	bne.n	800133a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff ff66 	bl	800121c <LL_ADC_IsInternalRegulatorEnabled>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d10d      	bne.n	8001372 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800135a:	f043 0210 	orr.w	r2, r3, #16
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001366:	f043 0201 	orr.w	r2, r3, #1
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff ff77 	bl	800126a <LL_ADC_REG_IsConversionOngoing>
 800137c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001382:	f003 0310 	and.w	r3, r3, #16
 8001386:	2b00      	cmp	r3, #0
 8001388:	f040 80c8 	bne.w	800151c <HAL_ADC_Init+0x264>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	2b00      	cmp	r3, #0
 8001390:	f040 80c4 	bne.w	800151c <HAL_ADC_Init+0x264>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001398:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800139c:	f043 0202 	orr.w	r2, r3, #2
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ff4b 	bl	8001244 <LL_ADC_IsEnabled>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d10b      	bne.n	80013cc <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80013b4:	4862      	ldr	r0, [pc, #392]	; (8001540 <HAL_ADC_Init+0x288>)
 80013b6:	f7ff ff45 	bl	8001244 <LL_ADC_IsEnabled>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d105      	bne.n	80013cc <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	4619      	mov	r1, r3
 80013c6:	485f      	ldr	r0, [pc, #380]	; (8001544 <HAL_ADC_Init+0x28c>)
 80013c8:	f7ff fdd6 	bl	8000f78 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	7e5b      	ldrb	r3, [r3, #25]
 80013d0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013d6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80013dc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80013e2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013ea:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013ec:	4313      	orrs	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d106      	bne.n	8001408 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fe:	3b01      	subs	r3, #1
 8001400:	045b      	lsls	r3, r3, #17
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4313      	orrs	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800140c:	2b00      	cmp	r3, #0
 800140e:	d009      	beq.n	8001424 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001414:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800141c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	4313      	orrs	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	68d9      	ldr	r1, [r3, #12]
 800142e:	4b46      	ldr	r3, [pc, #280]	; (8001548 <HAL_ADC_Init+0x290>)
 8001430:	400b      	ands	r3, r1
 8001432:	69b9      	ldr	r1, [r7, #24]
 8001434:	430b      	orrs	r3, r1
 8001436:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff ff14 	bl	800126a <LL_ADC_REG_IsConversionOngoing>
 8001442:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff ff21 	bl	8001290 <LL_ADC_INJ_IsConversionOngoing>
 800144e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d140      	bne.n	80014d8 <HAL_ADC_Init+0x220>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d13d      	bne.n	80014d8 <HAL_ADC_Init+0x220>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	7e1b      	ldrb	r3, [r3, #24]
 8001464:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001466:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800146e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001470:	4313      	orrs	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	68db      	ldr	r3, [r3, #12]
 800147e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001482:	f023 0306 	bic.w	r3, r3, #6
 8001486:	69b9      	ldr	r1, [r7, #24]
 8001488:	430b      	orrs	r3, r1
 800148a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001492:	2b01      	cmp	r3, #1
 8001494:	d118      	bne.n	80014c8 <HAL_ADC_Init+0x210>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	691b      	ldr	r3, [r3, #16]
 80014a0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80014a4:	f023 0304 	bic.w	r3, r3, #4
 80014a8:	6879      	ldr	r1, [r7, #4]
 80014aa:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
 80014ac:	6879      	ldr	r1, [r7, #4]
 80014ae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80014b0:	4308      	orrs	r0, r1
 80014b2:	6879      	ldr	r1, [r7, #4]
 80014b4:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80014b6:	4308      	orrs	r0, r1
 80014b8:	6879      	ldr	r1, [r7, #4]
 80014ba:	6c89      	ldr	r1, [r1, #72]	; 0x48
 80014bc:	4301      	orrs	r1, r0
 80014be:	430b      	orrs	r3, r1
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	6113      	str	r3, [r2, #16]
 80014c6:	e007      	b.n	80014d8 <HAL_ADC_Init+0x220>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	6812      	ldr	r2, [r2, #0]
 80014d0:	6912      	ldr	r2, [r2, #16]
 80014d2:	f022 0201 	bic.w	r2, r2, #1
 80014d6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	691b      	ldr	r3, [r3, #16]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d10c      	bne.n	80014fa <HAL_ADC_Init+0x242>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	6812      	ldr	r2, [r2, #0]
 80014e8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80014ea:	f022 010f 	bic.w	r1, r2, #15
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	69d2      	ldr	r2, [r2, #28]
 80014f2:	3a01      	subs	r2, #1
 80014f4:	430a      	orrs	r2, r1
 80014f6:	631a      	str	r2, [r3, #48]	; 0x30
 80014f8:	e007      	b.n	800150a <HAL_ADC_Init+0x252>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	6812      	ldr	r2, [r2, #0]
 8001502:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001504:	f022 020f 	bic.w	r2, r2, #15
 8001508:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800150e:	f023 0303 	bic.w	r3, r3, #3
 8001512:	f043 0201 	orr.w	r2, r3, #1
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	659a      	str	r2, [r3, #88]	; 0x58
 800151a:	e007      	b.n	800152c <HAL_ADC_Init+0x274>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001520:	f043 0210 	orr.w	r2, r3, #16
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800152c:	7ffb      	ldrb	r3, [r7, #31]
}
 800152e:	4618      	mov	r0, r3
 8001530:	3720      	adds	r7, #32
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20000000 	.word	0x20000000
 800153c:	053e2d63 	.word	0x053e2d63
 8001540:	50040000 	.word	0x50040000
 8001544:	50040300 	.word	0x50040300
 8001548:	fff0c007 	.word	0xfff0c007

0800154c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b0b6      	sub	sp, #216	; 0xd8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001556:	2300      	movs	r3, #0
 8001558:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800155c:	2300      	movs	r3, #0
 800155e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001566:	2b01      	cmp	r3, #1
 8001568:	d101      	bne.n	800156e <HAL_ADC_ConfigChannel+0x22>
 800156a:	2302      	movs	r3, #2
 800156c:	e3d2      	b.n	8001d14 <HAL_ADC_ConfigChannel+0x7c8>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2201      	movs	r2, #1
 8001572:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff fe75 	bl	800126a <LL_ADC_REG_IsConversionOngoing>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	f040 83b7 	bne.w	8001cf6 <HAL_ADC_ConfigChannel+0x7aa>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	2b05      	cmp	r3, #5
 800158e:	d824      	bhi.n	80015da <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	3b02      	subs	r3, #2
 8001596:	2b03      	cmp	r3, #3
 8001598:	d81b      	bhi.n	80015d2 <HAL_ADC_ConfigChannel+0x86>
 800159a:	a201      	add	r2, pc, #4	; (adr r2, 80015a0 <HAL_ADC_ConfigChannel+0x54>)
 800159c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015a0:	080015b1 	.word	0x080015b1
 80015a4:	080015b9 	.word	0x080015b9
 80015a8:	080015c1 	.word	0x080015c1
 80015ac:	080015c9 	.word	0x080015c9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	220c      	movs	r2, #12
 80015b4:	605a      	str	r2, [r3, #4]
          break;
 80015b6:	e010      	b.n	80015da <HAL_ADC_ConfigChannel+0x8e>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	2212      	movs	r2, #18
 80015bc:	605a      	str	r2, [r3, #4]
          break;
 80015be:	e00c      	b.n	80015da <HAL_ADC_ConfigChannel+0x8e>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	2218      	movs	r2, #24
 80015c4:	605a      	str	r2, [r3, #4]
          break;
 80015c6:	e008      	b.n	80015da <HAL_ADC_ConfigChannel+0x8e>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015ce:	605a      	str	r2, [r3, #4]
          break;
 80015d0:	e003      	b.n	80015da <HAL_ADC_ConfigChannel+0x8e>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	2206      	movs	r2, #6
 80015d6:	605a      	str	r2, [r3, #4]
          break;
 80015d8:	bf00      	nop
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6818      	ldr	r0, [r3, #0]
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	6859      	ldr	r1, [r3, #4]
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	461a      	mov	r2, r3
 80015e8:	f7ff fd62 	bl	80010b0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff fe3a 	bl	800126a <LL_ADC_REG_IsConversionOngoing>
 80015f6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff fe46 	bl	8001290 <LL_ADC_INJ_IsConversionOngoing>
 8001604:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001608:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800160c:	2b00      	cmp	r3, #0
 800160e:	f040 81c1 	bne.w	8001994 <HAL_ADC_ConfigChannel+0x448>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001612:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001616:	2b00      	cmp	r3, #0
 8001618:	f040 81bc 	bne.w	8001994 <HAL_ADC_ConfigChannel+0x448>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001624:	d10f      	bne.n	8001646 <HAL_ADC_ConfigChannel+0xfa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6818      	ldr	r0, [r3, #0]
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2200      	movs	r2, #0
 8001630:	4619      	mov	r1, r3
 8001632:	f7ff fd69 	bl	8001108 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff fd23 	bl	800108a <LL_ADC_SetSamplingTimeCommonConfig>
 8001644:	e00e      	b.n	8001664 <HAL_ADC_ConfigChannel+0x118>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6818      	ldr	r0, [r3, #0]
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	6819      	ldr	r1, [r3, #0]
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	461a      	mov	r2, r3
 8001654:	f7ff fd58 	bl	8001108 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2100      	movs	r1, #0
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff fd13 	bl	800108a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	695a      	ldr	r2, [r3, #20]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	08db      	lsrs	r3, r3, #3
 8001670:	f003 0303 	and.w	r3, r3, #3
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	691b      	ldr	r3, [r3, #16]
 8001682:	2b04      	cmp	r3, #4
 8001684:	d00a      	beq.n	800169c <HAL_ADC_ConfigChannel+0x150>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6818      	ldr	r0, [r3, #0]
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	6919      	ldr	r1, [r3, #16]
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001696:	f7ff fca3 	bl	8000fe0 <LL_ADC_SetOffset>
 800169a:	e17b      	b.n	8001994 <HAL_ADC_ConfigChannel+0x448>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2100      	movs	r1, #0
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff fcc0 	bl	8001028 <LL_ADC_GetOffsetChannel>
 80016a8:	4603      	mov	r3, r0
 80016aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d10a      	bne.n	80016c8 <HAL_ADC_ConfigChannel+0x17c>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2100      	movs	r1, #0
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff fcb5 	bl	8001028 <LL_ADC_GetOffsetChannel>
 80016be:	4603      	mov	r3, r0
 80016c0:	0e9b      	lsrs	r3, r3, #26
 80016c2:	f003 021f 	and.w	r2, r3, #31
 80016c6:	e01e      	b.n	8001706 <HAL_ADC_ConfigChannel+0x1ba>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2100      	movs	r1, #0
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff fcaa 	bl	8001028 <LL_ADC_GetOffsetChannel>
 80016d4:	4603      	mov	r3, r0
 80016d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80016de:	fa93 f3a3 	rbit	r3, r3
 80016e2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80016e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80016ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80016ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d101      	bne.n	80016fa <HAL_ADC_ConfigChannel+0x1ae>
  {
    return 32U;
 80016f6:	2320      	movs	r3, #32
 80016f8:	e004      	b.n	8001704 <HAL_ADC_ConfigChannel+0x1b8>
  }
  return __builtin_clz(value);
 80016fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80016fe:	fab3 f383 	clz	r3, r3
 8001702:	b2db      	uxtb	r3, r3
 8001704:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800170e:	2b00      	cmp	r3, #0
 8001710:	d105      	bne.n	800171e <HAL_ADC_ConfigChannel+0x1d2>
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	0e9b      	lsrs	r3, r3, #26
 8001718:	f003 031f 	and.w	r3, r3, #31
 800171c:	e018      	b.n	8001750 <HAL_ADC_ConfigChannel+0x204>
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001726:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800172a:	fa93 f3a3 	rbit	r3, r3
 800172e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001732:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001736:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800173a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800173e:	2b00      	cmp	r3, #0
 8001740:	d101      	bne.n	8001746 <HAL_ADC_ConfigChannel+0x1fa>
    return 32U;
 8001742:	2320      	movs	r3, #32
 8001744:	e004      	b.n	8001750 <HAL_ADC_ConfigChannel+0x204>
  return __builtin_clz(value);
 8001746:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800174a:	fab3 f383 	clz	r3, r3
 800174e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001750:	429a      	cmp	r2, r3
 8001752:	d106      	bne.n	8001762 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2200      	movs	r2, #0
 800175a:	2100      	movs	r1, #0
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff fc79 	bl	8001054 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2101      	movs	r1, #1
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff fc5d 	bl	8001028 <LL_ADC_GetOffsetChannel>
 800176e:	4603      	mov	r3, r0
 8001770:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001774:	2b00      	cmp	r3, #0
 8001776:	d10a      	bne.n	800178e <HAL_ADC_ConfigChannel+0x242>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2101      	movs	r1, #1
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff fc52 	bl	8001028 <LL_ADC_GetOffsetChannel>
 8001784:	4603      	mov	r3, r0
 8001786:	0e9b      	lsrs	r3, r3, #26
 8001788:	f003 021f 	and.w	r2, r3, #31
 800178c:	e01e      	b.n	80017cc <HAL_ADC_ConfigChannel+0x280>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2101      	movs	r1, #1
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff fc47 	bl	8001028 <LL_ADC_GetOffsetChannel>
 800179a:	4603      	mov	r3, r0
 800179c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80017a4:	fa93 f3a3 	rbit	r3, r3
 80017a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80017ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80017b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80017b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d101      	bne.n	80017c0 <HAL_ADC_ConfigChannel+0x274>
    return 32U;
 80017bc:	2320      	movs	r3, #32
 80017be:	e004      	b.n	80017ca <HAL_ADC_ConfigChannel+0x27e>
  return __builtin_clz(value);
 80017c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80017c4:	fab3 f383 	clz	r3, r3
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d105      	bne.n	80017e4 <HAL_ADC_ConfigChannel+0x298>
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	0e9b      	lsrs	r3, r3, #26
 80017de:	f003 031f 	and.w	r3, r3, #31
 80017e2:	e018      	b.n	8001816 <HAL_ADC_ConfigChannel+0x2ca>
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80017f0:	fa93 f3a3 	rbit	r3, r3
 80017f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80017f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80017fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001800:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001804:	2b00      	cmp	r3, #0
 8001806:	d101      	bne.n	800180c <HAL_ADC_ConfigChannel+0x2c0>
    return 32U;
 8001808:	2320      	movs	r3, #32
 800180a:	e004      	b.n	8001816 <HAL_ADC_ConfigChannel+0x2ca>
  return __builtin_clz(value);
 800180c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001810:	fab3 f383 	clz	r3, r3
 8001814:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001816:	429a      	cmp	r2, r3
 8001818:	d106      	bne.n	8001828 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2200      	movs	r2, #0
 8001820:	2101      	movs	r1, #1
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff fc16 	bl	8001054 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2102      	movs	r1, #2
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff fbfa 	bl	8001028 <LL_ADC_GetOffsetChannel>
 8001834:	4603      	mov	r3, r0
 8001836:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800183a:	2b00      	cmp	r3, #0
 800183c:	d10a      	bne.n	8001854 <HAL_ADC_ConfigChannel+0x308>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2102      	movs	r1, #2
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff fbef 	bl	8001028 <LL_ADC_GetOffsetChannel>
 800184a:	4603      	mov	r3, r0
 800184c:	0e9b      	lsrs	r3, r3, #26
 800184e:	f003 021f 	and.w	r2, r3, #31
 8001852:	e01e      	b.n	8001892 <HAL_ADC_ConfigChannel+0x346>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2102      	movs	r1, #2
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff fbe4 	bl	8001028 <LL_ADC_GetOffsetChannel>
 8001860:	4603      	mov	r3, r0
 8001862:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001866:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800186a:	fa93 f3a3 	rbit	r3, r3
 800186e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001872:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001876:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800187a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800187e:	2b00      	cmp	r3, #0
 8001880:	d101      	bne.n	8001886 <HAL_ADC_ConfigChannel+0x33a>
    return 32U;
 8001882:	2320      	movs	r3, #32
 8001884:	e004      	b.n	8001890 <HAL_ADC_ConfigChannel+0x344>
  return __builtin_clz(value);
 8001886:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800188a:	fab3 f383 	clz	r3, r3
 800188e:	b2db      	uxtb	r3, r3
 8001890:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800189a:	2b00      	cmp	r3, #0
 800189c:	d105      	bne.n	80018aa <HAL_ADC_ConfigChannel+0x35e>
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	0e9b      	lsrs	r3, r3, #26
 80018a4:	f003 031f 	and.w	r3, r3, #31
 80018a8:	e016      	b.n	80018d8 <HAL_ADC_ConfigChannel+0x38c>
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80018b6:	fa93 f3a3 	rbit	r3, r3
 80018ba:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80018bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80018c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d101      	bne.n	80018ce <HAL_ADC_ConfigChannel+0x382>
    return 32U;
 80018ca:	2320      	movs	r3, #32
 80018cc:	e004      	b.n	80018d8 <HAL_ADC_ConfigChannel+0x38c>
  return __builtin_clz(value);
 80018ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80018d2:	fab3 f383 	clz	r3, r3
 80018d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80018d8:	429a      	cmp	r2, r3
 80018da:	d106      	bne.n	80018ea <HAL_ADC_ConfigChannel+0x39e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2200      	movs	r2, #0
 80018e2:	2102      	movs	r1, #2
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff fbb5 	bl	8001054 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2103      	movs	r1, #3
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff fb99 	bl	8001028 <LL_ADC_GetOffsetChannel>
 80018f6:	4603      	mov	r3, r0
 80018f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d10a      	bne.n	8001916 <HAL_ADC_ConfigChannel+0x3ca>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2103      	movs	r1, #3
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff fb8e 	bl	8001028 <LL_ADC_GetOffsetChannel>
 800190c:	4603      	mov	r3, r0
 800190e:	0e9b      	lsrs	r3, r3, #26
 8001910:	f003 021f 	and.w	r2, r3, #31
 8001914:	e017      	b.n	8001946 <HAL_ADC_ConfigChannel+0x3fa>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2103      	movs	r1, #3
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff fb83 	bl	8001028 <LL_ADC_GetOffsetChannel>
 8001922:	4603      	mov	r3, r0
 8001924:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001926:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001928:	fa93 f3a3 	rbit	r3, r3
 800192c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800192e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001930:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001932:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001934:	2b00      	cmp	r3, #0
 8001936:	d101      	bne.n	800193c <HAL_ADC_ConfigChannel+0x3f0>
    return 32U;
 8001938:	2320      	movs	r3, #32
 800193a:	e003      	b.n	8001944 <HAL_ADC_ConfigChannel+0x3f8>
  return __builtin_clz(value);
 800193c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800193e:	fab3 f383 	clz	r3, r3
 8001942:	b2db      	uxtb	r3, r3
 8001944:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800194e:	2b00      	cmp	r3, #0
 8001950:	d105      	bne.n	800195e <HAL_ADC_ConfigChannel+0x412>
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	0e9b      	lsrs	r3, r3, #26
 8001958:	f003 031f 	and.w	r3, r3, #31
 800195c:	e011      	b.n	8001982 <HAL_ADC_ConfigChannel+0x436>
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001964:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001966:	fa93 f3a3 	rbit	r3, r3
 800196a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800196c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800196e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <HAL_ADC_ConfigChannel+0x42e>
    return 32U;
 8001976:	2320      	movs	r3, #32
 8001978:	e003      	b.n	8001982 <HAL_ADC_ConfigChannel+0x436>
  return __builtin_clz(value);
 800197a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800197c:	fab3 f383 	clz	r3, r3
 8001980:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001982:	429a      	cmp	r2, r3
 8001984:	d106      	bne.n	8001994 <HAL_ADC_ConfigChannel+0x448>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2200      	movs	r2, #0
 800198c:	2103      	movs	r1, #3
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff fb60 	bl	8001054 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff fc53 	bl	8001244 <LL_ADC_IsEnabled>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f040 813f 	bne.w	8001c24 <HAL_ADC_ConfigChannel+0x6d8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6818      	ldr	r0, [r3, #0]
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	6819      	ldr	r1, [r3, #0]
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	461a      	mov	r2, r3
 80019b4:	f7ff fbd4 	bl	8001160 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	4a8e      	ldr	r2, [pc, #568]	; (8001bf8 <HAL_ADC_ConfigChannel+0x6ac>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	f040 8130 	bne.w	8001c24 <HAL_ADC_ConfigChannel+0x6d8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d10b      	bne.n	80019ec <HAL_ADC_ConfigChannel+0x4a0>
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	0e9b      	lsrs	r3, r3, #26
 80019da:	3301      	adds	r3, #1
 80019dc:	f003 031f 	and.w	r3, r3, #31
 80019e0:	2b09      	cmp	r3, #9
 80019e2:	bf94      	ite	ls
 80019e4:	2301      	movls	r3, #1
 80019e6:	2300      	movhi	r3, #0
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	e019      	b.n	8001a20 <HAL_ADC_ConfigChannel+0x4d4>
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019f4:	fa93 f3a3 	rbit	r3, r3
 80019f8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80019fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019fc:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80019fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d101      	bne.n	8001a08 <HAL_ADC_ConfigChannel+0x4bc>
    return 32U;
 8001a04:	2320      	movs	r3, #32
 8001a06:	e003      	b.n	8001a10 <HAL_ADC_ConfigChannel+0x4c4>
  return __builtin_clz(value);
 8001a08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a0a:	fab3 f383 	clz	r3, r3
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	3301      	adds	r3, #1
 8001a12:	f003 031f 	and.w	r3, r3, #31
 8001a16:	2b09      	cmp	r3, #9
 8001a18:	bf94      	ite	ls
 8001a1a:	2301      	movls	r3, #1
 8001a1c:	2300      	movhi	r3, #0
 8001a1e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d079      	beq.n	8001b18 <HAL_ADC_ConfigChannel+0x5cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d107      	bne.n	8001a40 <HAL_ADC_ConfigChannel+0x4f4>
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	0e9b      	lsrs	r3, r3, #26
 8001a36:	3301      	adds	r3, #1
 8001a38:	069b      	lsls	r3, r3, #26
 8001a3a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a3e:	e015      	b.n	8001a6c <HAL_ADC_ConfigChannel+0x520>
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a48:	fa93 f3a3 	rbit	r3, r3
 8001a4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001a4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a50:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001a52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d101      	bne.n	8001a5c <HAL_ADC_ConfigChannel+0x510>
    return 32U;
 8001a58:	2320      	movs	r3, #32
 8001a5a:	e003      	b.n	8001a64 <HAL_ADC_ConfigChannel+0x518>
  return __builtin_clz(value);
 8001a5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a5e:	fab3 f383 	clz	r3, r3
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	3301      	adds	r3, #1
 8001a66:	069b      	lsls	r3, r3, #26
 8001a68:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d109      	bne.n	8001a8c <HAL_ADC_ConfigChannel+0x540>
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	0e9b      	lsrs	r3, r3, #26
 8001a7e:	3301      	adds	r3, #1
 8001a80:	f003 031f 	and.w	r3, r3, #31
 8001a84:	2101      	movs	r1, #1
 8001a86:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8a:	e017      	b.n	8001abc <HAL_ADC_ConfigChannel+0x570>
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a94:	fa93 f3a3 	rbit	r3, r3
 8001a98:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001a9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a9c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001a9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d101      	bne.n	8001aa8 <HAL_ADC_ConfigChannel+0x55c>
    return 32U;
 8001aa4:	2320      	movs	r3, #32
 8001aa6:	e003      	b.n	8001ab0 <HAL_ADC_ConfigChannel+0x564>
  return __builtin_clz(value);
 8001aa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001aaa:	fab3 f383 	clz	r3, r3
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	f003 031f 	and.w	r3, r3, #31
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8001abc:	ea42 0103 	orr.w	r1, r2, r3
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d10a      	bne.n	8001ae2 <HAL_ADC_ConfigChannel+0x596>
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	0e9b      	lsrs	r3, r3, #26
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	f003 021f 	and.w	r2, r3, #31
 8001ad8:	4613      	mov	r3, r2
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	4413      	add	r3, r2
 8001ade:	051b      	lsls	r3, r3, #20
 8001ae0:	e018      	b.n	8001b14 <HAL_ADC_ConfigChannel+0x5c8>
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001aea:	fa93 f3a3 	rbit	r3, r3
 8001aee:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001af2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001af4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d101      	bne.n	8001afe <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 8001afa:	2320      	movs	r3, #32
 8001afc:	e003      	b.n	8001b06 <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 8001afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b00:	fab3 f383 	clz	r3, r3
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	3301      	adds	r3, #1
 8001b08:	f003 021f 	and.w	r2, r3, #31
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	4413      	add	r3, r2
 8001b12:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b14:	430b      	orrs	r3, r1
 8001b16:	e080      	b.n	8001c1a <HAL_ADC_ConfigChannel+0x6ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d107      	bne.n	8001b34 <HAL_ADC_ConfigChannel+0x5e8>
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	0e9b      	lsrs	r3, r3, #26
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	069b      	lsls	r3, r3, #26
 8001b2e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b32:	e015      	b.n	8001b60 <HAL_ADC_ConfigChannel+0x614>
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b3c:	fa93 f3a3 	rbit	r3, r3
 8001b40:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b44:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d101      	bne.n	8001b50 <HAL_ADC_ConfigChannel+0x604>
    return 32U;
 8001b4c:	2320      	movs	r3, #32
 8001b4e:	e003      	b.n	8001b58 <HAL_ADC_ConfigChannel+0x60c>
  return __builtin_clz(value);
 8001b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b52:	fab3 f383 	clz	r3, r3
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	3301      	adds	r3, #1
 8001b5a:	069b      	lsls	r3, r3, #26
 8001b5c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d109      	bne.n	8001b80 <HAL_ADC_ConfigChannel+0x634>
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	0e9b      	lsrs	r3, r3, #26
 8001b72:	3301      	adds	r3, #1
 8001b74:	f003 031f 	and.w	r3, r3, #31
 8001b78:	2101      	movs	r1, #1
 8001b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7e:	e017      	b.n	8001bb0 <HAL_ADC_ConfigChannel+0x664>
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b86:	6a3b      	ldr	r3, [r7, #32]
 8001b88:	fa93 f3a3 	rbit	r3, r3
 8001b8c:	61fb      	str	r3, [r7, #28]
  return result;
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d101      	bne.n	8001b9c <HAL_ADC_ConfigChannel+0x650>
    return 32U;
 8001b98:	2320      	movs	r3, #32
 8001b9a:	e003      	b.n	8001ba4 <HAL_ADC_ConfigChannel+0x658>
  return __builtin_clz(value);
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9e:	fab3 f383 	clz	r3, r3
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	f003 031f 	and.w	r3, r3, #31
 8001baa:	2101      	movs	r1, #1
 8001bac:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb0:	ea42 0103 	orr.w	r1, r2, r3
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d10d      	bne.n	8001bdc <HAL_ADC_ConfigChannel+0x690>
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	0e9b      	lsrs	r3, r3, #26
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	f003 021f 	and.w	r2, r3, #31
 8001bcc:	4613      	mov	r3, r2
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	4413      	add	r3, r2
 8001bd2:	3b1e      	subs	r3, #30
 8001bd4:	051b      	lsls	r3, r3, #20
 8001bd6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bda:	e01d      	b.n	8001c18 <HAL_ADC_ConfigChannel+0x6cc>
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	fa93 f3a3 	rbit	r3, r3
 8001be8:	613b      	str	r3, [r7, #16]
  return result;
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d103      	bne.n	8001bfc <HAL_ADC_ConfigChannel+0x6b0>
    return 32U;
 8001bf4:	2320      	movs	r3, #32
 8001bf6:	e005      	b.n	8001c04 <HAL_ADC_ConfigChannel+0x6b8>
 8001bf8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	fab3 f383 	clz	r3, r3
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	3301      	adds	r3, #1
 8001c06:	f003 021f 	and.w	r2, r3, #31
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	4413      	add	r3, r2
 8001c10:	3b1e      	subs	r3, #30
 8001c12:	051b      	lsls	r3, r3, #20
 8001c14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c18:	430b      	orrs	r3, r1
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	6892      	ldr	r2, [r2, #8]
 8001c1e:	4619      	mov	r1, r3
 8001c20:	f7ff fa72 	bl	8001108 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	4b3c      	ldr	r3, [pc, #240]	; (8001d1c <HAL_ADC_ConfigChannel+0x7d0>)
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d06b      	beq.n	8001d08 <HAL_ADC_ConfigChannel+0x7bc>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c30:	483b      	ldr	r0, [pc, #236]	; (8001d20 <HAL_ADC_ConfigChannel+0x7d4>)
 8001c32:	f7ff f9c7 	bl	8000fc4 <LL_ADC_GetCommonPathInternalCh>
 8001c36:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a39      	ldr	r2, [pc, #228]	; (8001d24 <HAL_ADC_ConfigChannel+0x7d8>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d126      	bne.n	8001c92 <HAL_ADC_ConfigChannel+0x746>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001c44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d120      	bne.n	8001c92 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a34      	ldr	r2, [pc, #208]	; (8001d28 <HAL_ADC_ConfigChannel+0x7dc>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d156      	bne.n	8001d08 <HAL_ADC_ConfigChannel+0x7bc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c5a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c5e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c62:	4619      	mov	r1, r3
 8001c64:	482e      	ldr	r0, [pc, #184]	; (8001d20 <HAL_ADC_ConfigChannel+0x7d4>)
 8001c66:	f7ff f99a 	bl	8000f9e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001c6a:	4b30      	ldr	r3, [pc, #192]	; (8001d2c <HAL_ADC_ConfigChannel+0x7e0>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	099b      	lsrs	r3, r3, #6
 8001c70:	4a2f      	ldr	r2, [pc, #188]	; (8001d30 <HAL_ADC_ConfigChannel+0x7e4>)
 8001c72:	fba2 2303 	umull	r2, r3, r2, r3
 8001c76:	099a      	lsrs	r2, r3, #6
 8001c78:	4613      	mov	r3, r2
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	4413      	add	r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001c82:	e002      	b.n	8001c8a <HAL_ADC_ConfigChannel+0x73e>
          {
            wait_loop_index--;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d1f9      	bne.n	8001c84 <HAL_ADC_ConfigChannel+0x738>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c90:	e03a      	b.n	8001d08 <HAL_ADC_ConfigChannel+0x7bc>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a27      	ldr	r2, [pc, #156]	; (8001d34 <HAL_ADC_ConfigChannel+0x7e8>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d113      	bne.n	8001cc4 <HAL_ADC_ConfigChannel+0x778>
 8001c9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ca0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d10d      	bne.n	8001cc4 <HAL_ADC_ConfigChannel+0x778>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a1e      	ldr	r2, [pc, #120]	; (8001d28 <HAL_ADC_ConfigChannel+0x7dc>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d12a      	bne.n	8001d08 <HAL_ADC_ConfigChannel+0x7bc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cb2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001cb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4818      	ldr	r0, [pc, #96]	; (8001d20 <HAL_ADC_ConfigChannel+0x7d4>)
 8001cbe:	f7ff f96e 	bl	8000f9e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001cc2:	e021      	b.n	8001d08 <HAL_ADC_ConfigChannel+0x7bc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a1b      	ldr	r2, [pc, #108]	; (8001d38 <HAL_ADC_ConfigChannel+0x7ec>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d11c      	bne.n	8001d08 <HAL_ADC_ConfigChannel+0x7bc>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001cce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d116      	bne.n	8001d08 <HAL_ADC_ConfigChannel+0x7bc>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a12      	ldr	r2, [pc, #72]	; (8001d28 <HAL_ADC_ConfigChannel+0x7dc>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d111      	bne.n	8001d08 <HAL_ADC_ConfigChannel+0x7bc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ce4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ce8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001cec:	4619      	mov	r1, r3
 8001cee:	480c      	ldr	r0, [pc, #48]	; (8001d20 <HAL_ADC_ConfigChannel+0x7d4>)
 8001cf0:	f7ff f955 	bl	8000f9e <LL_ADC_SetCommonPathInternalCh>
 8001cf4:	e008      	b.n	8001d08 <HAL_ADC_ConfigChannel+0x7bc>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cfa:	f043 0220 	orr.w	r2, r3, #32
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001d10:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	37d8      	adds	r7, #216	; 0xd8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	80080000 	.word	0x80080000
 8001d20:	50040300 	.word	0x50040300
 8001d24:	c7520000 	.word	0xc7520000
 8001d28:	50040000 	.word	0x50040000
 8001d2c:	20000000 	.word	0x20000000
 8001d30:	053e2d63 	.word	0x053e2d63
 8001d34:	cb840000 	.word	0xcb840000
 8001d38:	80000001 	.word	0x80000001

08001d3c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e0ec      	b.n	8001f28 <HAL_CAN_Init+0x1ec>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d102      	bne.n	8001d60 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f7fe ff62 	bl	8000c24 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	6812      	ldr	r2, [r2, #0]
 8001d68:	6812      	ldr	r2, [r2, #0]
 8001d6a:	f022 0202 	bic.w	r2, r2, #2
 8001d6e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d70:	f7ff f8f6 	bl	8000f60 <HAL_GetTick>
 8001d74:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d76:	e012      	b.n	8001d9e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d78:	f7ff f8f2 	bl	8000f60 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b0a      	cmp	r3, #10
 8001d84:	d90b      	bls.n	8001d9e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2205      	movs	r2, #5
 8001d96:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e0c4      	b.n	8001f28 <HAL_CAN_Init+0x1ec>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1e5      	bne.n	8001d78 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	6812      	ldr	r2, [r2, #0]
 8001db4:	6812      	ldr	r2, [r2, #0]
 8001db6:	f042 0201 	orr.w	r2, r2, #1
 8001dba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001dbc:	f7ff f8d0 	bl	8000f60 <HAL_GetTick>
 8001dc0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001dc2:	e012      	b.n	8001dea <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001dc4:	f7ff f8cc 	bl	8000f60 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b0a      	cmp	r3, #10
 8001dd0:	d90b      	bls.n	8001dea <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2205      	movs	r2, #5
 8001de2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e09e      	b.n	8001f28 <HAL_CAN_Init+0x1ec>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d0e5      	beq.n	8001dc4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	7e1b      	ldrb	r3, [r3, #24]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d108      	bne.n	8001e12 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	6812      	ldr	r2, [r2, #0]
 8001e08:	6812      	ldr	r2, [r2, #0]
 8001e0a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	e007      	b.n	8001e22 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	6812      	ldr	r2, [r2, #0]
 8001e1a:	6812      	ldr	r2, [r2, #0]
 8001e1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e20:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	7e5b      	ldrb	r3, [r3, #25]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d108      	bne.n	8001e3c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	6812      	ldr	r2, [r2, #0]
 8001e32:	6812      	ldr	r2, [r2, #0]
 8001e34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	e007      	b.n	8001e4c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	6812      	ldr	r2, [r2, #0]
 8001e44:	6812      	ldr	r2, [r2, #0]
 8001e46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	7e9b      	ldrb	r3, [r3, #26]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d108      	bne.n	8001e66 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	6812      	ldr	r2, [r2, #0]
 8001e5c:	6812      	ldr	r2, [r2, #0]
 8001e5e:	f042 0220 	orr.w	r2, r2, #32
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	e007      	b.n	8001e76 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	6812      	ldr	r2, [r2, #0]
 8001e6e:	6812      	ldr	r2, [r2, #0]
 8001e70:	f022 0220 	bic.w	r2, r2, #32
 8001e74:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	7edb      	ldrb	r3, [r3, #27]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d108      	bne.n	8001e90 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	6812      	ldr	r2, [r2, #0]
 8001e86:	6812      	ldr	r2, [r2, #0]
 8001e88:	f022 0210 	bic.w	r2, r2, #16
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	e007      	b.n	8001ea0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	6812      	ldr	r2, [r2, #0]
 8001e98:	6812      	ldr	r2, [r2, #0]
 8001e9a:	f042 0210 	orr.w	r2, r2, #16
 8001e9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	7f1b      	ldrb	r3, [r3, #28]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d108      	bne.n	8001eba <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	6812      	ldr	r2, [r2, #0]
 8001eb0:	6812      	ldr	r2, [r2, #0]
 8001eb2:	f042 0208 	orr.w	r2, r2, #8
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	e007      	b.n	8001eca <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	6812      	ldr	r2, [r2, #0]
 8001ec2:	6812      	ldr	r2, [r2, #0]
 8001ec4:	f022 0208 	bic.w	r2, r2, #8
 8001ec8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	7f5b      	ldrb	r3, [r3, #29]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d108      	bne.n	8001ee4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	6812      	ldr	r2, [r2, #0]
 8001eda:	6812      	ldr	r2, [r2, #0]
 8001edc:	f042 0204 	orr.w	r2, r2, #4
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	e007      	b.n	8001ef4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	6812      	ldr	r2, [r2, #0]
 8001eec:	6812      	ldr	r2, [r2, #0]
 8001eee:	f022 0204 	bic.w	r2, r2, #4
 8001ef2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	6891      	ldr	r1, [r2, #8]
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	68d2      	ldr	r2, [r2, #12]
 8001f00:	4311      	orrs	r1, r2
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	6912      	ldr	r2, [r2, #16]
 8001f06:	4311      	orrs	r1, r2
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	6952      	ldr	r2, [r2, #20]
 8001f0c:	4311      	orrs	r1, r2
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	6852      	ldr	r2, [r2, #4]
 8001f12:	3a01      	subs	r2, #1
 8001f14:	430a      	orrs	r2, r1
 8001f16:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f40:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <__NVIC_SetPriorityGrouping+0x44>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f46:	68ba      	ldr	r2, [r7, #8]
 8001f48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f62:	4a04      	ldr	r2, [pc, #16]	; (8001f74 <__NVIC_SetPriorityGrouping+0x44>)
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	60d3      	str	r3, [r2, #12]
}
 8001f68:	bf00      	nop
 8001f6a:	3714      	adds	r7, #20
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	e000ed00 	.word	0xe000ed00

08001f78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f7c:	4b04      	ldr	r3, [pc, #16]	; (8001f90 <__NVIC_GetPriorityGrouping+0x18>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	0a1b      	lsrs	r3, r3, #8
 8001f82:	f003 0307 	and.w	r3, r3, #7
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	e000ed00 	.word	0xe000ed00

08001f94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	db0b      	blt.n	8001fbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fa6:	4909      	ldr	r1, [pc, #36]	; (8001fcc <__NVIC_EnableIRQ+0x38>)
 8001fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fac:	095b      	lsrs	r3, r3, #5
 8001fae:	79fa      	ldrb	r2, [r7, #7]
 8001fb0:	f002 021f 	and.w	r2, r2, #31
 8001fb4:	2001      	movs	r0, #1
 8001fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8001fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fbe:	bf00      	nop
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	e000e100 	.word	0xe000e100

08001fd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	6039      	str	r1, [r7, #0]
 8001fda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	db0a      	blt.n	8001ffa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe4:	490d      	ldr	r1, [pc, #52]	; (800201c <__NVIC_SetPriority+0x4c>)
 8001fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	b2d2      	uxtb	r2, r2
 8001fee:	0112      	lsls	r2, r2, #4
 8001ff0:	b2d2      	uxtb	r2, r2
 8001ff2:	440b      	add	r3, r1
 8001ff4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ff8:	e00a      	b.n	8002010 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ffa:	4909      	ldr	r1, [pc, #36]	; (8002020 <__NVIC_SetPriority+0x50>)
 8001ffc:	79fb      	ldrb	r3, [r7, #7]
 8001ffe:	f003 030f 	and.w	r3, r3, #15
 8002002:	3b04      	subs	r3, #4
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	0112      	lsls	r2, r2, #4
 800200a:	b2d2      	uxtb	r2, r2
 800200c:	440b      	add	r3, r1
 800200e:	761a      	strb	r2, [r3, #24]
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	e000e100 	.word	0xe000e100
 8002020:	e000ed00 	.word	0xe000ed00

08002024 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002024:	b480      	push	{r7}
 8002026:	b089      	sub	sp, #36	; 0x24
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	f1c3 0307 	rsb	r3, r3, #7
 800203e:	2b04      	cmp	r3, #4
 8002040:	bf28      	it	cs
 8002042:	2304      	movcs	r3, #4
 8002044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	3304      	adds	r3, #4
 800204a:	2b06      	cmp	r3, #6
 800204c:	d902      	bls.n	8002054 <NVIC_EncodePriority+0x30>
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	3b03      	subs	r3, #3
 8002052:	e000      	b.n	8002056 <NVIC_EncodePriority+0x32>
 8002054:	2300      	movs	r3, #0
 8002056:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002058:	2201      	movs	r2, #1
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	1e5a      	subs	r2, r3, #1
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	401a      	ands	r2, r3
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800206a:	2101      	movs	r1, #1
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	fa01 f303 	lsl.w	r3, r1, r3
 8002072:	1e59      	subs	r1, r3, #1
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002078:	4313      	orrs	r3, r2
         );
}
 800207a:	4618      	mov	r0, r3
 800207c:	3724      	adds	r7, #36	; 0x24
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
	...

08002088 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3b01      	subs	r3, #1
 8002094:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002098:	d301      	bcc.n	800209e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800209a:	2301      	movs	r3, #1
 800209c:	e00f      	b.n	80020be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800209e:	4a0a      	ldr	r2, [pc, #40]	; (80020c8 <SysTick_Config+0x40>)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3b01      	subs	r3, #1
 80020a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020a6:	210f      	movs	r1, #15
 80020a8:	f04f 30ff 	mov.w	r0, #4294967295
 80020ac:	f7ff ff90 	bl	8001fd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020b0:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <SysTick_Config+0x40>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020b6:	4b04      	ldr	r3, [pc, #16]	; (80020c8 <SysTick_Config+0x40>)
 80020b8:	2207      	movs	r2, #7
 80020ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	e000e010 	.word	0xe000e010

080020cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f7ff ff2b 	bl	8001f30 <__NVIC_SetPriorityGrouping>
}
 80020da:	bf00      	nop
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b086      	sub	sp, #24
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	4603      	mov	r3, r0
 80020ea:	60b9      	str	r1, [r7, #8]
 80020ec:	607a      	str	r2, [r7, #4]
 80020ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020f0:	2300      	movs	r3, #0
 80020f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020f4:	f7ff ff40 	bl	8001f78 <__NVIC_GetPriorityGrouping>
 80020f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	68b9      	ldr	r1, [r7, #8]
 80020fe:	6978      	ldr	r0, [r7, #20]
 8002100:	f7ff ff90 	bl	8002024 <NVIC_EncodePriority>
 8002104:	4602      	mov	r2, r0
 8002106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800210a:	4611      	mov	r1, r2
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff ff5f 	bl	8001fd0 <__NVIC_SetPriority>
}
 8002112:	bf00      	nop
 8002114:	3718      	adds	r7, #24
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b082      	sub	sp, #8
 800211e:	af00      	add	r7, sp, #0
 8002120:	4603      	mov	r3, r0
 8002122:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff ff33 	bl	8001f94 <__NVIC_EnableIRQ>
}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b082      	sub	sp, #8
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f7ff ffa2 	bl	8002088 <SysTick_Config>
 8002144:	4603      	mov	r3, r0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
	...

08002150 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002150:	b480      	push	{r7}
 8002152:	b087      	sub	sp, #28
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800215a:	2300      	movs	r3, #0
 800215c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800215e:	e154      	b.n	800240a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	2101      	movs	r1, #1
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	fa01 f303 	lsl.w	r3, r1, r3
 800216c:	4013      	ands	r3, r2
 800216e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2b00      	cmp	r3, #0
 8002174:	f000 8146 	beq.w	8002404 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d00b      	beq.n	8002198 <HAL_GPIO_Init+0x48>
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	2b02      	cmp	r3, #2
 8002186:	d007      	beq.n	8002198 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800218c:	2b11      	cmp	r3, #17
 800218e:	d003      	beq.n	8002198 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	2b12      	cmp	r3, #18
 8002196:	d130      	bne.n	80021fa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	2203      	movs	r2, #3
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	43db      	mvns	r3, r3
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	4013      	ands	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	68da      	ldr	r2, [r3, #12]
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	4313      	orrs	r3, r2
 80021c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021ce:	2201      	movs	r2, #1
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	43db      	mvns	r3, r3
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	4013      	ands	r3, r2
 80021dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	091b      	lsrs	r3, r3, #4
 80021e4:	f003 0201 	and.w	r2, r3, #1
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	2203      	movs	r2, #3
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	43db      	mvns	r3, r3
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	4013      	ands	r3, r2
 8002210:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	689a      	ldr	r2, [r3, #8]
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	fa02 f303 	lsl.w	r3, r2, r3
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	4313      	orrs	r3, r2
 8002222:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	2b02      	cmp	r3, #2
 8002230:	d003      	beq.n	800223a <HAL_GPIO_Init+0xea>
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2b12      	cmp	r3, #18
 8002238:	d123      	bne.n	8002282 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	08da      	lsrs	r2, r3, #3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	3208      	adds	r2, #8
 8002242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002246:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	220f      	movs	r2, #15
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	43db      	mvns	r3, r3
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	4013      	ands	r3, r2
 800225c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	691a      	ldr	r2, [r3, #16]
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	f003 0307 	and.w	r3, r3, #7
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	4313      	orrs	r3, r2
 8002272:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	08da      	lsrs	r2, r3, #3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	3208      	adds	r2, #8
 800227c:	6939      	ldr	r1, [r7, #16]
 800227e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	2203      	movs	r2, #3
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	43db      	mvns	r3, r3
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	4013      	ands	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f003 0203 	and.w	r2, r3, #3
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f000 80a0 	beq.w	8002404 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022c4:	4a58      	ldr	r2, [pc, #352]	; (8002428 <HAL_GPIO_Init+0x2d8>)
 80022c6:	4b58      	ldr	r3, [pc, #352]	; (8002428 <HAL_GPIO_Init+0x2d8>)
 80022c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ca:	f043 0301 	orr.w	r3, r3, #1
 80022ce:	6613      	str	r3, [r2, #96]	; 0x60
 80022d0:	4b55      	ldr	r3, [pc, #340]	; (8002428 <HAL_GPIO_Init+0x2d8>)
 80022d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	60bb      	str	r3, [r7, #8]
 80022da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80022dc:	4a53      	ldr	r2, [pc, #332]	; (800242c <HAL_GPIO_Init+0x2dc>)
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	089b      	lsrs	r3, r3, #2
 80022e2:	3302      	adds	r3, #2
 80022e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	220f      	movs	r2, #15
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	43db      	mvns	r3, r3
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	4013      	ands	r3, r2
 80022fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002306:	d019      	beq.n	800233c <HAL_GPIO_Init+0x1ec>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a49      	ldr	r2, [pc, #292]	; (8002430 <HAL_GPIO_Init+0x2e0>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d013      	beq.n	8002338 <HAL_GPIO_Init+0x1e8>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a48      	ldr	r2, [pc, #288]	; (8002434 <HAL_GPIO_Init+0x2e4>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d00d      	beq.n	8002334 <HAL_GPIO_Init+0x1e4>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4a47      	ldr	r2, [pc, #284]	; (8002438 <HAL_GPIO_Init+0x2e8>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d007      	beq.n	8002330 <HAL_GPIO_Init+0x1e0>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a46      	ldr	r2, [pc, #280]	; (800243c <HAL_GPIO_Init+0x2ec>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d101      	bne.n	800232c <HAL_GPIO_Init+0x1dc>
 8002328:	2304      	movs	r3, #4
 800232a:	e008      	b.n	800233e <HAL_GPIO_Init+0x1ee>
 800232c:	2307      	movs	r3, #7
 800232e:	e006      	b.n	800233e <HAL_GPIO_Init+0x1ee>
 8002330:	2303      	movs	r3, #3
 8002332:	e004      	b.n	800233e <HAL_GPIO_Init+0x1ee>
 8002334:	2302      	movs	r3, #2
 8002336:	e002      	b.n	800233e <HAL_GPIO_Init+0x1ee>
 8002338:	2301      	movs	r3, #1
 800233a:	e000      	b.n	800233e <HAL_GPIO_Init+0x1ee>
 800233c:	2300      	movs	r3, #0
 800233e:	697a      	ldr	r2, [r7, #20]
 8002340:	f002 0203 	and.w	r2, r2, #3
 8002344:	0092      	lsls	r2, r2, #2
 8002346:	4093      	lsls	r3, r2
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	4313      	orrs	r3, r2
 800234c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800234e:	4937      	ldr	r1, [pc, #220]	; (800242c <HAL_GPIO_Init+0x2dc>)
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	089b      	lsrs	r3, r3, #2
 8002354:	3302      	adds	r3, #2
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800235c:	4b38      	ldr	r3, [pc, #224]	; (8002440 <HAL_GPIO_Init+0x2f0>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	43db      	mvns	r3, r3
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	4013      	ands	r3, r2
 800236a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d003      	beq.n	8002380 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	4313      	orrs	r3, r2
 800237e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002380:	4a2f      	ldr	r2, [pc, #188]	; (8002440 <HAL_GPIO_Init+0x2f0>)
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002386:	4b2e      	ldr	r3, [pc, #184]	; (8002440 <HAL_GPIO_Init+0x2f0>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	43db      	mvns	r3, r3
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	4013      	ands	r3, r2
 8002394:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d003      	beq.n	80023aa <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80023aa:	4a25      	ldr	r2, [pc, #148]	; (8002440 <HAL_GPIO_Init+0x2f0>)
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023b0:	4b23      	ldr	r3, [pc, #140]	; (8002440 <HAL_GPIO_Init+0x2f0>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	43db      	mvns	r3, r3
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	4013      	ands	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d003      	beq.n	80023d4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023d4:	4a1a      	ldr	r2, [pc, #104]	; (8002440 <HAL_GPIO_Init+0x2f0>)
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80023da:	4b19      	ldr	r3, [pc, #100]	; (8002440 <HAL_GPIO_Init+0x2f0>)
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	43db      	mvns	r3, r3
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	4013      	ands	r3, r2
 80023e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d003      	beq.n	80023fe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023fe:	4a10      	ldr	r2, [pc, #64]	; (8002440 <HAL_GPIO_Init+0x2f0>)
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	3301      	adds	r3, #1
 8002408:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	fa22 f303 	lsr.w	r3, r2, r3
 8002414:	2b00      	cmp	r3, #0
 8002416:	f47f aea3 	bne.w	8002160 <HAL_GPIO_Init+0x10>
  }
}
 800241a:	bf00      	nop
 800241c:	371c      	adds	r7, #28
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	40021000 	.word	0x40021000
 800242c:	40010000 	.word	0x40010000
 8002430:	48000400 	.word	0x48000400
 8002434:	48000800 	.word	0x48000800
 8002438:	48000c00 	.word	0x48000c00
 800243c:	48001000 	.word	0x48001000
 8002440:	40010400 	.word	0x40010400

08002444 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	460b      	mov	r3, r1
 800244e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	691a      	ldr	r2, [r3, #16]
 8002454:	887b      	ldrh	r3, [r7, #2]
 8002456:	4013      	ands	r3, r2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d002      	beq.n	8002462 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800245c:	2301      	movs	r3, #1
 800245e:	73fb      	strb	r3, [r7, #15]
 8002460:	e001      	b.n	8002466 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002462:	2300      	movs	r3, #0
 8002464:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002466:	7bfb      	ldrb	r3, [r7, #15]
}
 8002468:	4618      	mov	r0, r3
 800246a:	3714      	adds	r7, #20
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	460b      	mov	r3, r1
 800247e:	807b      	strh	r3, [r7, #2]
 8002480:	4613      	mov	r3, r2
 8002482:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002484:	787b      	ldrb	r3, [r7, #1]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800248a:	887a      	ldrh	r2, [r7, #2]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002490:	e002      	b.n	8002498 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002492:	887a      	ldrh	r2, [r7, #2]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e080      	b.n	80025b8 <HAL_I2C_Init+0x114>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d106      	bne.n	80024d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f7fe fbee 	bl	8000cac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2224      	movs	r2, #36	; 0x24
 80024d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	6812      	ldr	r2, [r2, #0]
 80024e0:	6812      	ldr	r2, [r2, #0]
 80024e2:	f022 0201 	bic.w	r2, r2, #1
 80024e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	6852      	ldr	r2, [r2, #4]
 80024f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024f4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	6812      	ldr	r2, [r2, #0]
 80024fe:	6892      	ldr	r2, [r2, #8]
 8002500:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002504:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d107      	bne.n	800251e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	6892      	ldr	r2, [r2, #8]
 8002516:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800251a:	609a      	str	r2, [r3, #8]
 800251c:	e006      	b.n	800252c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	6892      	ldr	r2, [r2, #8]
 8002526:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800252a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	2b02      	cmp	r3, #2
 8002532:	d104      	bne.n	800253e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800253c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800254c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002550:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	6812      	ldr	r2, [r2, #0]
 800255a:	68d2      	ldr	r2, [r2, #12]
 800255c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002560:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	6911      	ldr	r1, [r2, #16]
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	6952      	ldr	r2, [r2, #20]
 800256e:	4311      	orrs	r1, r2
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	6992      	ldr	r2, [r2, #24]
 8002574:	0212      	lsls	r2, r2, #8
 8002576:	430a      	orrs	r2, r1
 8002578:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	69d1      	ldr	r1, [r2, #28]
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	6a12      	ldr	r2, [r2, #32]
 8002586:	430a      	orrs	r2, r1
 8002588:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	6812      	ldr	r2, [r2, #0]
 8002592:	6812      	ldr	r2, [r2, #0]
 8002594:	f042 0201 	orr.w	r2, r2, #1
 8002598:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2220      	movs	r2, #32
 80025a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b20      	cmp	r3, #32
 80025d4:	d138      	bne.n	8002648 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d101      	bne.n	80025e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80025e0:	2302      	movs	r3, #2
 80025e2:	e032      	b.n	800264a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2224      	movs	r2, #36	; 0x24
 80025f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	6812      	ldr	r2, [r2, #0]
 80025fc:	6812      	ldr	r2, [r2, #0]
 80025fe:	f022 0201 	bic.w	r2, r2, #1
 8002602:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	6812      	ldr	r2, [r2, #0]
 800260c:	6812      	ldr	r2, [r2, #0]
 800260e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002612:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	6812      	ldr	r2, [r2, #0]
 800261c:	6811      	ldr	r1, [r2, #0]
 800261e:	683a      	ldr	r2, [r7, #0]
 8002620:	430a      	orrs	r2, r1
 8002622:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	6812      	ldr	r2, [r2, #0]
 800262c:	6812      	ldr	r2, [r2, #0]
 800262e:	f042 0201 	orr.w	r2, r2, #1
 8002632:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2220      	movs	r2, #32
 8002638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002644:	2300      	movs	r3, #0
 8002646:	e000      	b.n	800264a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002648:	2302      	movs	r3, #2
  }
}
 800264a:	4618      	mov	r0, r3
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002656:	b480      	push	{r7}
 8002658:	b085      	sub	sp, #20
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
 800265e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2b20      	cmp	r3, #32
 800266a:	d139      	bne.n	80026e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002672:	2b01      	cmp	r3, #1
 8002674:	d101      	bne.n	800267a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002676:	2302      	movs	r3, #2
 8002678:	e033      	b.n	80026e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2201      	movs	r2, #1
 800267e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2224      	movs	r2, #36	; 0x24
 8002686:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	6812      	ldr	r2, [r2, #0]
 8002692:	6812      	ldr	r2, [r2, #0]
 8002694:	f022 0201 	bic.w	r2, r2, #1
 8002698:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80026a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	021b      	lsls	r3, r3, #8
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	6812      	ldr	r2, [r2, #0]
 80026c4:	6812      	ldr	r2, [r2, #0]
 80026c6:	f042 0201 	orr.w	r2, r2, #1
 80026ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2220      	movs	r2, #32
 80026d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026dc:	2300      	movs	r3, #0
 80026de:	e000      	b.n	80026e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80026e0:	2302      	movs	r3, #2
  }
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3714      	adds	r7, #20
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
	...

080026f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80026f4:	4b04      	ldr	r3, [pc, #16]	; (8002708 <HAL_PWREx_GetVoltageRange+0x18>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	40007000 	.word	0x40007000

0800270c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800271a:	d130      	bne.n	800277e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800271c:	4b23      	ldr	r3, [pc, #140]	; (80027ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002724:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002728:	d038      	beq.n	800279c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800272a:	4a20      	ldr	r2, [pc, #128]	; (80027ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800272c:	4b1f      	ldr	r3, [pc, #124]	; (80027ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002734:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002738:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800273a:	4b1d      	ldr	r3, [pc, #116]	; (80027b0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2232      	movs	r2, #50	; 0x32
 8002740:	fb02 f303 	mul.w	r3, r2, r3
 8002744:	4a1b      	ldr	r2, [pc, #108]	; (80027b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002746:	fba2 2303 	umull	r2, r3, r2, r3
 800274a:	0c9b      	lsrs	r3, r3, #18
 800274c:	3301      	adds	r3, #1
 800274e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002750:	e002      	b.n	8002758 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	3b01      	subs	r3, #1
 8002756:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002758:	4b14      	ldr	r3, [pc, #80]	; (80027ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002760:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002764:	d102      	bne.n	800276c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d1f2      	bne.n	8002752 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800276c:	4b0f      	ldr	r3, [pc, #60]	; (80027ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800276e:	695b      	ldr	r3, [r3, #20]
 8002770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002774:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002778:	d110      	bne.n	800279c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e00f      	b.n	800279e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800277e:	4b0b      	ldr	r3, [pc, #44]	; (80027ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002786:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800278a:	d007      	beq.n	800279c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800278c:	4a07      	ldr	r2, [pc, #28]	; (80027ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800278e:	4b07      	ldr	r3, [pc, #28]	; (80027ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002796:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800279a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3714      	adds	r7, #20
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	40007000 	.word	0x40007000
 80027b0:	20000000 	.word	0x20000000
 80027b4:	431bde83 	.word	0x431bde83

080027b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b088      	sub	sp, #32
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d102      	bne.n	80027cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	f000 bc11 	b.w	8002fee <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027cc:	4ba0      	ldr	r3, [pc, #640]	; (8002a50 <HAL_RCC_OscConfig+0x298>)
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f003 030c 	and.w	r3, r3, #12
 80027d4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027d6:	4b9e      	ldr	r3, [pc, #632]	; (8002a50 <HAL_RCC_OscConfig+0x298>)
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	f003 0303 	and.w	r3, r3, #3
 80027de:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0310 	and.w	r3, r3, #16
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f000 80e4 	beq.w	80029b6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d007      	beq.n	8002804 <HAL_RCC_OscConfig+0x4c>
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	2b0c      	cmp	r3, #12
 80027f8:	f040 808b 	bne.w	8002912 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	f040 8087 	bne.w	8002912 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002804:	4b92      	ldr	r3, [pc, #584]	; (8002a50 <HAL_RCC_OscConfig+0x298>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d005      	beq.n	800281c <HAL_RCC_OscConfig+0x64>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d101      	bne.n	800281c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e3e8      	b.n	8002fee <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a1a      	ldr	r2, [r3, #32]
 8002820:	4b8b      	ldr	r3, [pc, #556]	; (8002a50 <HAL_RCC_OscConfig+0x298>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0308 	and.w	r3, r3, #8
 8002828:	2b00      	cmp	r3, #0
 800282a:	d004      	beq.n	8002836 <HAL_RCC_OscConfig+0x7e>
 800282c:	4b88      	ldr	r3, [pc, #544]	; (8002a50 <HAL_RCC_OscConfig+0x298>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002834:	e005      	b.n	8002842 <HAL_RCC_OscConfig+0x8a>
 8002836:	4b86      	ldr	r3, [pc, #536]	; (8002a50 <HAL_RCC_OscConfig+0x298>)
 8002838:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800283c:	091b      	lsrs	r3, r3, #4
 800283e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002842:	429a      	cmp	r2, r3
 8002844:	d923      	bls.n	800288e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a1b      	ldr	r3, [r3, #32]
 800284a:	4618      	mov	r0, r3
 800284c:	f000 fd40 	bl	80032d0 <RCC_SetFlashLatencyFromMSIRange>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e3c9      	b.n	8002fee <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800285a:	4a7d      	ldr	r2, [pc, #500]	; (8002a50 <HAL_RCC_OscConfig+0x298>)
 800285c:	4b7c      	ldr	r3, [pc, #496]	; (8002a50 <HAL_RCC_OscConfig+0x298>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f043 0308 	orr.w	r3, r3, #8
 8002864:	6013      	str	r3, [r2, #0]
 8002866:	497a      	ldr	r1, [pc, #488]	; (8002a50 <HAL_RCC_OscConfig+0x298>)
 8002868:	4b79      	ldr	r3, [pc, #484]	; (8002a50 <HAL_RCC_OscConfig+0x298>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a1b      	ldr	r3, [r3, #32]
 8002874:	4313      	orrs	r3, r2
 8002876:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002878:	4975      	ldr	r1, [pc, #468]	; (8002a50 <HAL_RCC_OscConfig+0x298>)
 800287a:	4b75      	ldr	r3, [pc, #468]	; (8002a50 <HAL_RCC_OscConfig+0x298>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	69db      	ldr	r3, [r3, #28]
 8002886:	021b      	lsls	r3, r3, #8
 8002888:	4313      	orrs	r3, r2
 800288a:	604b      	str	r3, [r1, #4]
 800288c:	e025      	b.n	80028da <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800288e:	4a70      	ldr	r2, [pc, #448]	; (8002a50 <HAL_RCC_OscConfig+0x298>)
 8002890:	4b6f      	ldr	r3, [pc, #444]	; (8002a50 <HAL_RCC_OscConfig+0x298>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f043 0308 	orr.w	r3, r3, #8
 8002898:	6013      	str	r3, [r2, #0]
 800289a:	496d      	ldr	r1, [pc, #436]	; (8002a50 <HAL_RCC_OscConfig+0x298>)
 800289c:	4b6c      	ldr	r3, [pc, #432]	; (8002a50 <HAL_RCC_OscConfig+0x298>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028ac:	4968      	ldr	r1, [pc, #416]	; (8002a50 <HAL_RCC_OscConfig+0x298>)
 80028ae:	4b68      	ldr	r3, [pc, #416]	; (8002a50 <HAL_RCC_OscConfig+0x298>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	69db      	ldr	r3, [r3, #28]
 80028ba:	021b      	lsls	r3, r3, #8
 80028bc:	4313      	orrs	r3, r2
 80028be:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d109      	bne.n	80028da <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f000 fd00 	bl	80032d0 <RCC_SetFlashLatencyFromMSIRange>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e389      	b.n	8002fee <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028da:	f000 fc6f 	bl	80031bc <HAL_RCC_GetSysClockFreq>
 80028de:	4601      	mov	r1, r0
 80028e0:	4b5b      	ldr	r3, [pc, #364]	; (8002a50 <HAL_RCC_OscConfig+0x298>)
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	091b      	lsrs	r3, r3, #4
 80028e6:	f003 030f 	and.w	r3, r3, #15
 80028ea:	4a5a      	ldr	r2, [pc, #360]	; (8002a54 <HAL_RCC_OscConfig+0x29c>)
 80028ec:	5cd3      	ldrb	r3, [r2, r3]
 80028ee:	f003 031f 	and.w	r3, r3, #31
 80028f2:	fa21 f303 	lsr.w	r3, r1, r3
 80028f6:	4a58      	ldr	r2, [pc, #352]	; (8002a58 <HAL_RCC_OscConfig+0x2a0>)
 80028f8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80028fa:	4b58      	ldr	r3, [pc, #352]	; (8002a5c <HAL_RCC_OscConfig+0x2a4>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4618      	mov	r0, r3
 8002900:	f7fe fade 	bl	8000ec0 <HAL_InitTick>
 8002904:	4603      	mov	r3, r0
 8002906:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002908:	7bfb      	ldrb	r3, [r7, #15]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d052      	beq.n	80029b4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800290e:	7bfb      	ldrb	r3, [r7, #15]
 8002910:	e36d      	b.n	8002fee <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d032      	beq.n	8002980 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800291a:	4a4d      	ldr	r2, [pc, #308]	; (8002a50 <HAL_RCC_OscConfig+0x298>)
 800291c:	4b4c      	ldr	r3, [pc, #304]	; (8002a50 <HAL_RCC_OscConfig+0x298>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f043 0301 	orr.w	r3, r3, #1
 8002924:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002926:	f7fe fb1b 	bl	8000f60 <HAL_GetTick>
 800292a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800292c:	e008      	b.n	8002940 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800292e:	f7fe fb17 	bl	8000f60 <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	2b02      	cmp	r3, #2
 800293a:	d901      	bls.n	8002940 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e356      	b.n	8002fee <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002940:	4b43      	ldr	r3, [pc, #268]	; (8002a50 <HAL_RCC_OscConfig+0x298>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d0f0      	beq.n	800292e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800294c:	4a40      	ldr	r2, [pc, #256]	; (8002a50 <HAL_RCC_OscConfig+0x298>)
 800294e:	4b40      	ldr	r3, [pc, #256]	; (8002a50 <HAL_RCC_OscConfig+0x298>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f043 0308 	orr.w	r3, r3, #8
 8002956:	6013      	str	r3, [r2, #0]
 8002958:	493d      	ldr	r1, [pc, #244]	; (8002a50 <HAL_RCC_OscConfig+0x298>)
 800295a:	4b3d      	ldr	r3, [pc, #244]	; (8002a50 <HAL_RCC_OscConfig+0x298>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a1b      	ldr	r3, [r3, #32]
 8002966:	4313      	orrs	r3, r2
 8002968:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800296a:	4939      	ldr	r1, [pc, #228]	; (8002a50 <HAL_RCC_OscConfig+0x298>)
 800296c:	4b38      	ldr	r3, [pc, #224]	; (8002a50 <HAL_RCC_OscConfig+0x298>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	69db      	ldr	r3, [r3, #28]
 8002978:	021b      	lsls	r3, r3, #8
 800297a:	4313      	orrs	r3, r2
 800297c:	604b      	str	r3, [r1, #4]
 800297e:	e01a      	b.n	80029b6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002980:	4a33      	ldr	r2, [pc, #204]	; (8002a50 <HAL_RCC_OscConfig+0x298>)
 8002982:	4b33      	ldr	r3, [pc, #204]	; (8002a50 <HAL_RCC_OscConfig+0x298>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f023 0301 	bic.w	r3, r3, #1
 800298a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800298c:	f7fe fae8 	bl	8000f60 <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002994:	f7fe fae4 	bl	8000f60 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e323      	b.n	8002fee <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80029a6:	4b2a      	ldr	r3, [pc, #168]	; (8002a50 <HAL_RCC_OscConfig+0x298>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1f0      	bne.n	8002994 <HAL_RCC_OscConfig+0x1dc>
 80029b2:	e000      	b.n	80029b6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029b4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d073      	beq.n	8002aaa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	2b08      	cmp	r3, #8
 80029c6:	d005      	beq.n	80029d4 <HAL_RCC_OscConfig+0x21c>
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	2b0c      	cmp	r3, #12
 80029cc:	d10e      	bne.n	80029ec <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	2b03      	cmp	r3, #3
 80029d2:	d10b      	bne.n	80029ec <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029d4:	4b1e      	ldr	r3, [pc, #120]	; (8002a50 <HAL_RCC_OscConfig+0x298>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d063      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x2f0>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d15f      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e300      	b.n	8002fee <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029f4:	d106      	bne.n	8002a04 <HAL_RCC_OscConfig+0x24c>
 80029f6:	4a16      	ldr	r2, [pc, #88]	; (8002a50 <HAL_RCC_OscConfig+0x298>)
 80029f8:	4b15      	ldr	r3, [pc, #84]	; (8002a50 <HAL_RCC_OscConfig+0x298>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a00:	6013      	str	r3, [r2, #0]
 8002a02:	e01d      	b.n	8002a40 <HAL_RCC_OscConfig+0x288>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a0c:	d10c      	bne.n	8002a28 <HAL_RCC_OscConfig+0x270>
 8002a0e:	4a10      	ldr	r2, [pc, #64]	; (8002a50 <HAL_RCC_OscConfig+0x298>)
 8002a10:	4b0f      	ldr	r3, [pc, #60]	; (8002a50 <HAL_RCC_OscConfig+0x298>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a18:	6013      	str	r3, [r2, #0]
 8002a1a:	4a0d      	ldr	r2, [pc, #52]	; (8002a50 <HAL_RCC_OscConfig+0x298>)
 8002a1c:	4b0c      	ldr	r3, [pc, #48]	; (8002a50 <HAL_RCC_OscConfig+0x298>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a24:	6013      	str	r3, [r2, #0]
 8002a26:	e00b      	b.n	8002a40 <HAL_RCC_OscConfig+0x288>
 8002a28:	4a09      	ldr	r2, [pc, #36]	; (8002a50 <HAL_RCC_OscConfig+0x298>)
 8002a2a:	4b09      	ldr	r3, [pc, #36]	; (8002a50 <HAL_RCC_OscConfig+0x298>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a32:	6013      	str	r3, [r2, #0]
 8002a34:	4a06      	ldr	r2, [pc, #24]	; (8002a50 <HAL_RCC_OscConfig+0x298>)
 8002a36:	4b06      	ldr	r3, [pc, #24]	; (8002a50 <HAL_RCC_OscConfig+0x298>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d01b      	beq.n	8002a80 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a48:	f7fe fa8a 	bl	8000f60 <HAL_GetTick>
 8002a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a4e:	e010      	b.n	8002a72 <HAL_RCC_OscConfig+0x2ba>
 8002a50:	40021000 	.word	0x40021000
 8002a54:	08003be8 	.word	0x08003be8
 8002a58:	20000000 	.word	0x20000000
 8002a5c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a60:	f7fe fa7e 	bl	8000f60 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b64      	cmp	r3, #100	; 0x64
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e2bd      	b.n	8002fee <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a72:	4baf      	ldr	r3, [pc, #700]	; (8002d30 <HAL_RCC_OscConfig+0x578>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d0f0      	beq.n	8002a60 <HAL_RCC_OscConfig+0x2a8>
 8002a7e:	e014      	b.n	8002aaa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a80:	f7fe fa6e 	bl	8000f60 <HAL_GetTick>
 8002a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a88:	f7fe fa6a 	bl	8000f60 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b64      	cmp	r3, #100	; 0x64
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e2a9      	b.n	8002fee <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a9a:	4ba5      	ldr	r3, [pc, #660]	; (8002d30 <HAL_RCC_OscConfig+0x578>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1f0      	bne.n	8002a88 <HAL_RCC_OscConfig+0x2d0>
 8002aa6:	e000      	b.n	8002aaa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d060      	beq.n	8002b78 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	2b04      	cmp	r3, #4
 8002aba:	d005      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x310>
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	2b0c      	cmp	r3, #12
 8002ac0:	d119      	bne.n	8002af6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d116      	bne.n	8002af6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ac8:	4b99      	ldr	r3, [pc, #612]	; (8002d30 <HAL_RCC_OscConfig+0x578>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d005      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x328>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d101      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e286      	b.n	8002fee <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae0:	4993      	ldr	r1, [pc, #588]	; (8002d30 <HAL_RCC_OscConfig+0x578>)
 8002ae2:	4b93      	ldr	r3, [pc, #588]	; (8002d30 <HAL_RCC_OscConfig+0x578>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	061b      	lsls	r3, r3, #24
 8002af0:	4313      	orrs	r3, r2
 8002af2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002af4:	e040      	b.n	8002b78 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d023      	beq.n	8002b46 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002afe:	4a8c      	ldr	r2, [pc, #560]	; (8002d30 <HAL_RCC_OscConfig+0x578>)
 8002b00:	4b8b      	ldr	r3, [pc, #556]	; (8002d30 <HAL_RCC_OscConfig+0x578>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b0a:	f7fe fa29 	bl	8000f60 <HAL_GetTick>
 8002b0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b10:	e008      	b.n	8002b24 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b12:	f7fe fa25 	bl	8000f60 <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d901      	bls.n	8002b24 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e264      	b.n	8002fee <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b24:	4b82      	ldr	r3, [pc, #520]	; (8002d30 <HAL_RCC_OscConfig+0x578>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d0f0      	beq.n	8002b12 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b30:	497f      	ldr	r1, [pc, #508]	; (8002d30 <HAL_RCC_OscConfig+0x578>)
 8002b32:	4b7f      	ldr	r3, [pc, #508]	; (8002d30 <HAL_RCC_OscConfig+0x578>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	061b      	lsls	r3, r3, #24
 8002b40:	4313      	orrs	r3, r2
 8002b42:	604b      	str	r3, [r1, #4]
 8002b44:	e018      	b.n	8002b78 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b46:	4a7a      	ldr	r2, [pc, #488]	; (8002d30 <HAL_RCC_OscConfig+0x578>)
 8002b48:	4b79      	ldr	r3, [pc, #484]	; (8002d30 <HAL_RCC_OscConfig+0x578>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b52:	f7fe fa05 	bl	8000f60 <HAL_GetTick>
 8002b56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b58:	e008      	b.n	8002b6c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b5a:	f7fe fa01 	bl	8000f60 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d901      	bls.n	8002b6c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e240      	b.n	8002fee <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b6c:	4b70      	ldr	r3, [pc, #448]	; (8002d30 <HAL_RCC_OscConfig+0x578>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1f0      	bne.n	8002b5a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0308 	and.w	r3, r3, #8
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d03c      	beq.n	8002bfe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	695b      	ldr	r3, [r3, #20]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d01c      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b8c:	4a68      	ldr	r2, [pc, #416]	; (8002d30 <HAL_RCC_OscConfig+0x578>)
 8002b8e:	4b68      	ldr	r3, [pc, #416]	; (8002d30 <HAL_RCC_OscConfig+0x578>)
 8002b90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b94:	f043 0301 	orr.w	r3, r3, #1
 8002b98:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b9c:	f7fe f9e0 	bl	8000f60 <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ba4:	f7fe f9dc 	bl	8000f60 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e21b      	b.n	8002fee <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bb6:	4b5e      	ldr	r3, [pc, #376]	; (8002d30 <HAL_RCC_OscConfig+0x578>)
 8002bb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d0ef      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x3ec>
 8002bc4:	e01b      	b.n	8002bfe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bc6:	4a5a      	ldr	r2, [pc, #360]	; (8002d30 <HAL_RCC_OscConfig+0x578>)
 8002bc8:	4b59      	ldr	r3, [pc, #356]	; (8002d30 <HAL_RCC_OscConfig+0x578>)
 8002bca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bce:	f023 0301 	bic.w	r3, r3, #1
 8002bd2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd6:	f7fe f9c3 	bl	8000f60 <HAL_GetTick>
 8002bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bdc:	e008      	b.n	8002bf0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bde:	f7fe f9bf 	bl	8000f60 <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d901      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e1fe      	b.n	8002fee <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bf0:	4b4f      	ldr	r3, [pc, #316]	; (8002d30 <HAL_RCC_OscConfig+0x578>)
 8002bf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1ef      	bne.n	8002bde <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0304 	and.w	r3, r3, #4
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f000 80a6 	beq.w	8002d58 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002c10:	4b47      	ldr	r3, [pc, #284]	; (8002d30 <HAL_RCC_OscConfig+0x578>)
 8002c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d10d      	bne.n	8002c38 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c1c:	4a44      	ldr	r2, [pc, #272]	; (8002d30 <HAL_RCC_OscConfig+0x578>)
 8002c1e:	4b44      	ldr	r3, [pc, #272]	; (8002d30 <HAL_RCC_OscConfig+0x578>)
 8002c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c26:	6593      	str	r3, [r2, #88]	; 0x58
 8002c28:	4b41      	ldr	r3, [pc, #260]	; (8002d30 <HAL_RCC_OscConfig+0x578>)
 8002c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c30:	60bb      	str	r3, [r7, #8]
 8002c32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c34:	2301      	movs	r3, #1
 8002c36:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c38:	4b3e      	ldr	r3, [pc, #248]	; (8002d34 <HAL_RCC_OscConfig+0x57c>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d118      	bne.n	8002c76 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c44:	4a3b      	ldr	r2, [pc, #236]	; (8002d34 <HAL_RCC_OscConfig+0x57c>)
 8002c46:	4b3b      	ldr	r3, [pc, #236]	; (8002d34 <HAL_RCC_OscConfig+0x57c>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c4e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c50:	f7fe f986 	bl	8000f60 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c58:	f7fe f982 	bl	8000f60 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e1c1      	b.n	8002fee <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c6a:	4b32      	ldr	r3, [pc, #200]	; (8002d34 <HAL_RCC_OscConfig+0x57c>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d0f0      	beq.n	8002c58 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d108      	bne.n	8002c90 <HAL_RCC_OscConfig+0x4d8>
 8002c7e:	4a2c      	ldr	r2, [pc, #176]	; (8002d30 <HAL_RCC_OscConfig+0x578>)
 8002c80:	4b2b      	ldr	r3, [pc, #172]	; (8002d30 <HAL_RCC_OscConfig+0x578>)
 8002c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c86:	f043 0301 	orr.w	r3, r3, #1
 8002c8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c8e:	e024      	b.n	8002cda <HAL_RCC_OscConfig+0x522>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	2b05      	cmp	r3, #5
 8002c96:	d110      	bne.n	8002cba <HAL_RCC_OscConfig+0x502>
 8002c98:	4a25      	ldr	r2, [pc, #148]	; (8002d30 <HAL_RCC_OscConfig+0x578>)
 8002c9a:	4b25      	ldr	r3, [pc, #148]	; (8002d30 <HAL_RCC_OscConfig+0x578>)
 8002c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca0:	f043 0304 	orr.w	r3, r3, #4
 8002ca4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ca8:	4a21      	ldr	r2, [pc, #132]	; (8002d30 <HAL_RCC_OscConfig+0x578>)
 8002caa:	4b21      	ldr	r3, [pc, #132]	; (8002d30 <HAL_RCC_OscConfig+0x578>)
 8002cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb0:	f043 0301 	orr.w	r3, r3, #1
 8002cb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cb8:	e00f      	b.n	8002cda <HAL_RCC_OscConfig+0x522>
 8002cba:	4a1d      	ldr	r2, [pc, #116]	; (8002d30 <HAL_RCC_OscConfig+0x578>)
 8002cbc:	4b1c      	ldr	r3, [pc, #112]	; (8002d30 <HAL_RCC_OscConfig+0x578>)
 8002cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc2:	f023 0301 	bic.w	r3, r3, #1
 8002cc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cca:	4a19      	ldr	r2, [pc, #100]	; (8002d30 <HAL_RCC_OscConfig+0x578>)
 8002ccc:	4b18      	ldr	r3, [pc, #96]	; (8002d30 <HAL_RCC_OscConfig+0x578>)
 8002cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd2:	f023 0304 	bic.w	r3, r3, #4
 8002cd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d016      	beq.n	8002d10 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce2:	f7fe f93d 	bl	8000f60 <HAL_GetTick>
 8002ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ce8:	e00a      	b.n	8002d00 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cea:	f7fe f939 	bl	8000f60 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e176      	b.n	8002fee <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d00:	4b0b      	ldr	r3, [pc, #44]	; (8002d30 <HAL_RCC_OscConfig+0x578>)
 8002d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d0ed      	beq.n	8002cea <HAL_RCC_OscConfig+0x532>
 8002d0e:	e01a      	b.n	8002d46 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d10:	f7fe f926 	bl	8000f60 <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d16:	e00f      	b.n	8002d38 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d18:	f7fe f922 	bl	8000f60 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d906      	bls.n	8002d38 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e15f      	b.n	8002fee <HAL_RCC_OscConfig+0x836>
 8002d2e:	bf00      	nop
 8002d30:	40021000 	.word	0x40021000
 8002d34:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d38:	4baa      	ldr	r3, [pc, #680]	; (8002fe4 <HAL_RCC_OscConfig+0x82c>)
 8002d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1e8      	bne.n	8002d18 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d46:	7ffb      	ldrb	r3, [r7, #31]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d105      	bne.n	8002d58 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d4c:	4aa5      	ldr	r2, [pc, #660]	; (8002fe4 <HAL_RCC_OscConfig+0x82c>)
 8002d4e:	4ba5      	ldr	r3, [pc, #660]	; (8002fe4 <HAL_RCC_OscConfig+0x82c>)
 8002d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d56:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0320 	and.w	r3, r3, #32
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d03c      	beq.n	8002dde <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d01c      	beq.n	8002da6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d6c:	4a9d      	ldr	r2, [pc, #628]	; (8002fe4 <HAL_RCC_OscConfig+0x82c>)
 8002d6e:	4b9d      	ldr	r3, [pc, #628]	; (8002fe4 <HAL_RCC_OscConfig+0x82c>)
 8002d70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d74:	f043 0301 	orr.w	r3, r3, #1
 8002d78:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d7c:	f7fe f8f0 	bl	8000f60 <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d84:	f7fe f8ec 	bl	8000f60 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e12b      	b.n	8002fee <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d96:	4b93      	ldr	r3, [pc, #588]	; (8002fe4 <HAL_RCC_OscConfig+0x82c>)
 8002d98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d0ef      	beq.n	8002d84 <HAL_RCC_OscConfig+0x5cc>
 8002da4:	e01b      	b.n	8002dde <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002da6:	4a8f      	ldr	r2, [pc, #572]	; (8002fe4 <HAL_RCC_OscConfig+0x82c>)
 8002da8:	4b8e      	ldr	r3, [pc, #568]	; (8002fe4 <HAL_RCC_OscConfig+0x82c>)
 8002daa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002dae:	f023 0301 	bic.w	r3, r3, #1
 8002db2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db6:	f7fe f8d3 	bl	8000f60 <HAL_GetTick>
 8002dba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002dbc:	e008      	b.n	8002dd0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002dbe:	f7fe f8cf 	bl	8000f60 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e10e      	b.n	8002fee <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002dd0:	4b84      	ldr	r3, [pc, #528]	; (8002fe4 <HAL_RCC_OscConfig+0x82c>)
 8002dd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1ef      	bne.n	8002dbe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f000 8102 	beq.w	8002fec <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	f040 80c5 	bne.w	8002f7c <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002df2:	4b7c      	ldr	r3, [pc, #496]	; (8002fe4 <HAL_RCC_OscConfig+0x82c>)
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	f003 0203 	and.w	r2, r3, #3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d12c      	bne.n	8002e60 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e10:	3b01      	subs	r3, #1
 8002e12:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d123      	bne.n	8002e60 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e22:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d11b      	bne.n	8002e60 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e32:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d113      	bne.n	8002e60 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e42:	085b      	lsrs	r3, r3, #1
 8002e44:	3b01      	subs	r3, #1
 8002e46:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d109      	bne.n	8002e60 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	085b      	lsrs	r3, r3, #1
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d067      	beq.n	8002f30 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	2b0c      	cmp	r3, #12
 8002e64:	d062      	beq.n	8002f2c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002e66:	4b5f      	ldr	r3, [pc, #380]	; (8002fe4 <HAL_RCC_OscConfig+0x82c>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e0bb      	b.n	8002fee <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002e76:	4a5b      	ldr	r2, [pc, #364]	; (8002fe4 <HAL_RCC_OscConfig+0x82c>)
 8002e78:	4b5a      	ldr	r3, [pc, #360]	; (8002fe4 <HAL_RCC_OscConfig+0x82c>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e80:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e82:	f7fe f86d 	bl	8000f60 <HAL_GetTick>
 8002e86:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e88:	e008      	b.n	8002e9c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e8a:	f7fe f869 	bl	8000f60 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d901      	bls.n	8002e9c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e0a8      	b.n	8002fee <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e9c:	4b51      	ldr	r3, [pc, #324]	; (8002fe4 <HAL_RCC_OscConfig+0x82c>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d1f0      	bne.n	8002e8a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ea8:	484e      	ldr	r0, [pc, #312]	; (8002fe4 <HAL_RCC_OscConfig+0x82c>)
 8002eaa:	4b4e      	ldr	r3, [pc, #312]	; (8002fe4 <HAL_RCC_OscConfig+0x82c>)
 8002eac:	68da      	ldr	r2, [r3, #12]
 8002eae:	4b4e      	ldr	r3, [pc, #312]	; (8002fe8 <HAL_RCC_OscConfig+0x830>)
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002eba:	3a01      	subs	r2, #1
 8002ebc:	0112      	lsls	r2, r2, #4
 8002ebe:	4311      	orrs	r1, r2
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ec4:	0212      	lsls	r2, r2, #8
 8002ec6:	4311      	orrs	r1, r2
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ecc:	0852      	lsrs	r2, r2, #1
 8002ece:	3a01      	subs	r2, #1
 8002ed0:	0552      	lsls	r2, r2, #21
 8002ed2:	4311      	orrs	r1, r2
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ed8:	0852      	lsrs	r2, r2, #1
 8002eda:	3a01      	subs	r2, #1
 8002edc:	0652      	lsls	r2, r2, #25
 8002ede:	4311      	orrs	r1, r2
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ee4:	06d2      	lsls	r2, r2, #27
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	60c3      	str	r3, [r0, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002eec:	4a3d      	ldr	r2, [pc, #244]	; (8002fe4 <HAL_RCC_OscConfig+0x82c>)
 8002eee:	4b3d      	ldr	r3, [pc, #244]	; (8002fe4 <HAL_RCC_OscConfig+0x82c>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ef6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ef8:	4a3a      	ldr	r2, [pc, #232]	; (8002fe4 <HAL_RCC_OscConfig+0x82c>)
 8002efa:	4b3a      	ldr	r3, [pc, #232]	; (8002fe4 <HAL_RCC_OscConfig+0x82c>)
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f02:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f04:	f7fe f82c 	bl	8000f60 <HAL_GetTick>
 8002f08:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f0a:	e008      	b.n	8002f1e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f0c:	f7fe f828 	bl	8000f60 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e067      	b.n	8002fee <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f1e:	4b31      	ldr	r3, [pc, #196]	; (8002fe4 <HAL_RCC_OscConfig+0x82c>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d0f0      	beq.n	8002f0c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f2a:	e05f      	b.n	8002fec <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e05e      	b.n	8002fee <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f30:	4b2c      	ldr	r3, [pc, #176]	; (8002fe4 <HAL_RCC_OscConfig+0x82c>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d157      	bne.n	8002fec <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002f3c:	4a29      	ldr	r2, [pc, #164]	; (8002fe4 <HAL_RCC_OscConfig+0x82c>)
 8002f3e:	4b29      	ldr	r3, [pc, #164]	; (8002fe4 <HAL_RCC_OscConfig+0x82c>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f46:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f48:	4a26      	ldr	r2, [pc, #152]	; (8002fe4 <HAL_RCC_OscConfig+0x82c>)
 8002f4a:	4b26      	ldr	r3, [pc, #152]	; (8002fe4 <HAL_RCC_OscConfig+0x82c>)
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f52:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f54:	f7fe f804 	bl	8000f60 <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f5a:	e008      	b.n	8002f6e <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f5c:	f7fe f800 	bl	8000f60 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e03f      	b.n	8002fee <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f6e:	4b1d      	ldr	r3, [pc, #116]	; (8002fe4 <HAL_RCC_OscConfig+0x82c>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d0f0      	beq.n	8002f5c <HAL_RCC_OscConfig+0x7a4>
 8002f7a:	e037      	b.n	8002fec <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	2b0c      	cmp	r3, #12
 8002f80:	d02d      	beq.n	8002fde <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f82:	4a18      	ldr	r2, [pc, #96]	; (8002fe4 <HAL_RCC_OscConfig+0x82c>)
 8002f84:	4b17      	ldr	r3, [pc, #92]	; (8002fe4 <HAL_RCC_OscConfig+0x82c>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f8c:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f8e:	4b15      	ldr	r3, [pc, #84]	; (8002fe4 <HAL_RCC_OscConfig+0x82c>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d105      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002f9a:	4a12      	ldr	r2, [pc, #72]	; (8002fe4 <HAL_RCC_OscConfig+0x82c>)
 8002f9c:	4b11      	ldr	r3, [pc, #68]	; (8002fe4 <HAL_RCC_OscConfig+0x82c>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	f023 0303 	bic.w	r3, r3, #3
 8002fa4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002fa6:	4a0f      	ldr	r2, [pc, #60]	; (8002fe4 <HAL_RCC_OscConfig+0x82c>)
 8002fa8:	4b0e      	ldr	r3, [pc, #56]	; (8002fe4 <HAL_RCC_OscConfig+0x82c>)
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002fb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fb4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb6:	f7fd ffd3 	bl	8000f60 <HAL_GetTick>
 8002fba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fbc:	e008      	b.n	8002fd0 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fbe:	f7fd ffcf 	bl	8000f60 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e00e      	b.n	8002fee <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fd0:	4b04      	ldr	r3, [pc, #16]	; (8002fe4 <HAL_RCC_OscConfig+0x82c>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1f0      	bne.n	8002fbe <HAL_RCC_OscConfig+0x806>
 8002fdc:	e006      	b.n	8002fec <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e005      	b.n	8002fee <HAL_RCC_OscConfig+0x836>
 8002fe2:	bf00      	nop
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3720      	adds	r7, #32
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop

08002ff8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d101      	bne.n	800300c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e0c8      	b.n	800319e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800300c:	4b66      	ldr	r3, [pc, #408]	; (80031a8 <HAL_RCC_ClockConfig+0x1b0>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0207 	and.w	r2, r3, #7
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	429a      	cmp	r2, r3
 8003018:	d210      	bcs.n	800303c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800301a:	4963      	ldr	r1, [pc, #396]	; (80031a8 <HAL_RCC_ClockConfig+0x1b0>)
 800301c:	4b62      	ldr	r3, [pc, #392]	; (80031a8 <HAL_RCC_ClockConfig+0x1b0>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f023 0207 	bic.w	r2, r3, #7
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	4313      	orrs	r3, r2
 8003028:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800302a:	4b5f      	ldr	r3, [pc, #380]	; (80031a8 <HAL_RCC_ClockConfig+0x1b0>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0207 	and.w	r2, r3, #7
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	429a      	cmp	r2, r3
 8003036:	d001      	beq.n	800303c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e0b0      	b.n	800319e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0301 	and.w	r3, r3, #1
 8003044:	2b00      	cmp	r3, #0
 8003046:	d04c      	beq.n	80030e2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	2b03      	cmp	r3, #3
 800304e:	d107      	bne.n	8003060 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003050:	4b56      	ldr	r3, [pc, #344]	; (80031ac <HAL_RCC_ClockConfig+0x1b4>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d121      	bne.n	80030a0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e09e      	b.n	800319e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	2b02      	cmp	r3, #2
 8003066:	d107      	bne.n	8003078 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003068:	4b50      	ldr	r3, [pc, #320]	; (80031ac <HAL_RCC_ClockConfig+0x1b4>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d115      	bne.n	80030a0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e092      	b.n	800319e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d107      	bne.n	8003090 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003080:	4b4a      	ldr	r3, [pc, #296]	; (80031ac <HAL_RCC_ClockConfig+0x1b4>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d109      	bne.n	80030a0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e086      	b.n	800319e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003090:	4b46      	ldr	r3, [pc, #280]	; (80031ac <HAL_RCC_ClockConfig+0x1b4>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003098:	2b00      	cmp	r3, #0
 800309a:	d101      	bne.n	80030a0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e07e      	b.n	800319e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030a0:	4942      	ldr	r1, [pc, #264]	; (80031ac <HAL_RCC_ClockConfig+0x1b4>)
 80030a2:	4b42      	ldr	r3, [pc, #264]	; (80031ac <HAL_RCC_ClockConfig+0x1b4>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f023 0203 	bic.w	r2, r3, #3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030b2:	f7fd ff55 	bl	8000f60 <HAL_GetTick>
 80030b6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030b8:	e00a      	b.n	80030d0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030ba:	f7fd ff51 	bl	8000f60 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d901      	bls.n	80030d0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e066      	b.n	800319e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030d0:	4b36      	ldr	r3, [pc, #216]	; (80031ac <HAL_RCC_ClockConfig+0x1b4>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f003 020c 	and.w	r2, r3, #12
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	429a      	cmp	r2, r3
 80030e0:	d1eb      	bne.n	80030ba <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d008      	beq.n	8003100 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030ee:	492f      	ldr	r1, [pc, #188]	; (80031ac <HAL_RCC_ClockConfig+0x1b4>)
 80030f0:	4b2e      	ldr	r3, [pc, #184]	; (80031ac <HAL_RCC_ClockConfig+0x1b4>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003100:	4b29      	ldr	r3, [pc, #164]	; (80031a8 <HAL_RCC_ClockConfig+0x1b0>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0207 	and.w	r2, r3, #7
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	429a      	cmp	r2, r3
 800310c:	d910      	bls.n	8003130 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800310e:	4926      	ldr	r1, [pc, #152]	; (80031a8 <HAL_RCC_ClockConfig+0x1b0>)
 8003110:	4b25      	ldr	r3, [pc, #148]	; (80031a8 <HAL_RCC_ClockConfig+0x1b0>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f023 0207 	bic.w	r2, r3, #7
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	4313      	orrs	r3, r2
 800311c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800311e:	4b22      	ldr	r3, [pc, #136]	; (80031a8 <HAL_RCC_ClockConfig+0x1b0>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0207 	and.w	r2, r3, #7
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	429a      	cmp	r2, r3
 800312a:	d001      	beq.n	8003130 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e036      	b.n	800319e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0304 	and.w	r3, r3, #4
 8003138:	2b00      	cmp	r3, #0
 800313a:	d008      	beq.n	800314e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800313c:	491b      	ldr	r1, [pc, #108]	; (80031ac <HAL_RCC_ClockConfig+0x1b4>)
 800313e:	4b1b      	ldr	r3, [pc, #108]	; (80031ac <HAL_RCC_ClockConfig+0x1b4>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	4313      	orrs	r3, r2
 800314c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0308 	and.w	r3, r3, #8
 8003156:	2b00      	cmp	r3, #0
 8003158:	d009      	beq.n	800316e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800315a:	4914      	ldr	r1, [pc, #80]	; (80031ac <HAL_RCC_ClockConfig+0x1b4>)
 800315c:	4b13      	ldr	r3, [pc, #76]	; (80031ac <HAL_RCC_ClockConfig+0x1b4>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	4313      	orrs	r3, r2
 800316c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800316e:	f000 f825 	bl	80031bc <HAL_RCC_GetSysClockFreq>
 8003172:	4601      	mov	r1, r0
 8003174:	4b0d      	ldr	r3, [pc, #52]	; (80031ac <HAL_RCC_ClockConfig+0x1b4>)
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	091b      	lsrs	r3, r3, #4
 800317a:	f003 030f 	and.w	r3, r3, #15
 800317e:	4a0c      	ldr	r2, [pc, #48]	; (80031b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003180:	5cd3      	ldrb	r3, [r2, r3]
 8003182:	f003 031f 	and.w	r3, r3, #31
 8003186:	fa21 f303 	lsr.w	r3, r1, r3
 800318a:	4a0a      	ldr	r2, [pc, #40]	; (80031b4 <HAL_RCC_ClockConfig+0x1bc>)
 800318c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800318e:	4b0a      	ldr	r3, [pc, #40]	; (80031b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4618      	mov	r0, r3
 8003194:	f7fd fe94 	bl	8000ec0 <HAL_InitTick>
 8003198:	4603      	mov	r3, r0
 800319a:	72fb      	strb	r3, [r7, #11]

  return status;
 800319c:	7afb      	ldrb	r3, [r7, #11]
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3710      	adds	r7, #16
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	40022000 	.word	0x40022000
 80031ac:	40021000 	.word	0x40021000
 80031b0:	08003be8 	.word	0x08003be8
 80031b4:	20000000 	.word	0x20000000
 80031b8:	20000004 	.word	0x20000004

080031bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	b089      	sub	sp, #36	; 0x24
 80031c0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80031c2:	2300      	movs	r3, #0
 80031c4:	61fb      	str	r3, [r7, #28]
 80031c6:	2300      	movs	r3, #0
 80031c8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031ca:	4b3d      	ldr	r3, [pc, #244]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x104>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f003 030c 	and.w	r3, r3, #12
 80031d2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031d4:	4b3a      	ldr	r3, [pc, #232]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x104>)
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	f003 0303 	and.w	r3, r3, #3
 80031dc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d005      	beq.n	80031f0 <HAL_RCC_GetSysClockFreq+0x34>
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	2b0c      	cmp	r3, #12
 80031e8:	d121      	bne.n	800322e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d11e      	bne.n	800322e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80031f0:	4b33      	ldr	r3, [pc, #204]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x104>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0308 	and.w	r3, r3, #8
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d107      	bne.n	800320c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80031fc:	4b30      	ldr	r3, [pc, #192]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x104>)
 80031fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003202:	0a1b      	lsrs	r3, r3, #8
 8003204:	f003 030f 	and.w	r3, r3, #15
 8003208:	61fb      	str	r3, [r7, #28]
 800320a:	e005      	b.n	8003218 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800320c:	4b2c      	ldr	r3, [pc, #176]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x104>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	091b      	lsrs	r3, r3, #4
 8003212:	f003 030f 	and.w	r3, r3, #15
 8003216:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003218:	4a2a      	ldr	r2, [pc, #168]	; (80032c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003220:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d10d      	bne.n	8003244 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800322c:	e00a      	b.n	8003244 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	2b04      	cmp	r3, #4
 8003232:	d102      	bne.n	800323a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003234:	4b24      	ldr	r3, [pc, #144]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003236:	61bb      	str	r3, [r7, #24]
 8003238:	e004      	b.n	8003244 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	2b08      	cmp	r3, #8
 800323e:	d101      	bne.n	8003244 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003240:	4b22      	ldr	r3, [pc, #136]	; (80032cc <HAL_RCC_GetSysClockFreq+0x110>)
 8003242:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	2b0c      	cmp	r3, #12
 8003248:	d133      	bne.n	80032b2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800324a:	4b1d      	ldr	r3, [pc, #116]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x104>)
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	f003 0303 	and.w	r3, r3, #3
 8003252:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	2b02      	cmp	r3, #2
 8003258:	d002      	beq.n	8003260 <HAL_RCC_GetSysClockFreq+0xa4>
 800325a:	2b03      	cmp	r3, #3
 800325c:	d003      	beq.n	8003266 <HAL_RCC_GetSysClockFreq+0xaa>
 800325e:	e005      	b.n	800326c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003260:	4b19      	ldr	r3, [pc, #100]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003262:	617b      	str	r3, [r7, #20]
      break;
 8003264:	e005      	b.n	8003272 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003266:	4b19      	ldr	r3, [pc, #100]	; (80032cc <HAL_RCC_GetSysClockFreq+0x110>)
 8003268:	617b      	str	r3, [r7, #20]
      break;
 800326a:	e002      	b.n	8003272 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	617b      	str	r3, [r7, #20]
      break;
 8003270:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003272:	4b13      	ldr	r3, [pc, #76]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x104>)
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	091b      	lsrs	r3, r3, #4
 8003278:	f003 0307 	and.w	r3, r3, #7
 800327c:	3301      	adds	r3, #1
 800327e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003280:	4b0f      	ldr	r3, [pc, #60]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x104>)
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	0a1b      	lsrs	r3, r3, #8
 8003286:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800328a:	697a      	ldr	r2, [r7, #20]
 800328c:	fb02 f203 	mul.w	r2, r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	fbb2 f3f3 	udiv	r3, r2, r3
 8003296:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003298:	4b09      	ldr	r3, [pc, #36]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x104>)
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	0e5b      	lsrs	r3, r3, #25
 800329e:	f003 0303 	and.w	r3, r3, #3
 80032a2:	3301      	adds	r3, #1
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80032b2:	69bb      	ldr	r3, [r7, #24]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3724      	adds	r7, #36	; 0x24
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr
 80032c0:	40021000 	.word	0x40021000
 80032c4:	08003bf8 	.word	0x08003bf8
 80032c8:	00f42400 	.word	0x00f42400
 80032cc:	01312d00 	.word	0x01312d00

080032d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80032d8:	2300      	movs	r3, #0
 80032da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80032dc:	4b2a      	ldr	r3, [pc, #168]	; (8003388 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d003      	beq.n	80032f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80032e8:	f7ff fa02 	bl	80026f0 <HAL_PWREx_GetVoltageRange>
 80032ec:	6178      	str	r0, [r7, #20]
 80032ee:	e014      	b.n	800331a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80032f0:	4a25      	ldr	r2, [pc, #148]	; (8003388 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032f2:	4b25      	ldr	r3, [pc, #148]	; (8003388 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032fa:	6593      	str	r3, [r2, #88]	; 0x58
 80032fc:	4b22      	ldr	r3, [pc, #136]	; (8003388 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003300:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003304:	60fb      	str	r3, [r7, #12]
 8003306:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003308:	f7ff f9f2 	bl	80026f0 <HAL_PWREx_GetVoltageRange>
 800330c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800330e:	4a1e      	ldr	r2, [pc, #120]	; (8003388 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003310:	4b1d      	ldr	r3, [pc, #116]	; (8003388 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003314:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003318:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003320:	d10b      	bne.n	800333a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2b80      	cmp	r3, #128	; 0x80
 8003326:	d919      	bls.n	800335c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2ba0      	cmp	r3, #160	; 0xa0
 800332c:	d902      	bls.n	8003334 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800332e:	2302      	movs	r3, #2
 8003330:	613b      	str	r3, [r7, #16]
 8003332:	e013      	b.n	800335c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003334:	2301      	movs	r3, #1
 8003336:	613b      	str	r3, [r7, #16]
 8003338:	e010      	b.n	800335c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2b80      	cmp	r3, #128	; 0x80
 800333e:	d902      	bls.n	8003346 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003340:	2303      	movs	r3, #3
 8003342:	613b      	str	r3, [r7, #16]
 8003344:	e00a      	b.n	800335c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2b80      	cmp	r3, #128	; 0x80
 800334a:	d102      	bne.n	8003352 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800334c:	2302      	movs	r3, #2
 800334e:	613b      	str	r3, [r7, #16]
 8003350:	e004      	b.n	800335c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2b70      	cmp	r3, #112	; 0x70
 8003356:	d101      	bne.n	800335c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003358:	2301      	movs	r3, #1
 800335a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800335c:	490b      	ldr	r1, [pc, #44]	; (800338c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800335e:	4b0b      	ldr	r3, [pc, #44]	; (800338c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f023 0207 	bic.w	r2, r3, #7
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	4313      	orrs	r3, r2
 800336a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800336c:	4b07      	ldr	r3, [pc, #28]	; (800338c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0207 	and.w	r2, r3, #7
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	429a      	cmp	r2, r3
 8003378:	d001      	beq.n	800337e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e000      	b.n	8003380 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3718      	adds	r7, #24
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	40021000 	.word	0x40021000
 800338c:	40022000 	.word	0x40022000

08003390 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b086      	sub	sp, #24
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003398:	2300      	movs	r3, #0
 800339a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800339c:	2300      	movs	r3, #0
 800339e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d02f      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80033b4:	d005      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80033b6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80033ba:	d015      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x58>
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d007      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80033c0:	e00f      	b.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80033c2:	4a5d      	ldr	r2, [pc, #372]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80033c4:	4b5c      	ldr	r3, [pc, #368]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033cc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033ce:	e00c      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	3304      	adds	r3, #4
 80033d4:	2100      	movs	r1, #0
 80033d6:	4618      	mov	r0, r3
 80033d8:	f000 fa12 	bl	8003800 <RCCEx_PLLSAI1_Config>
 80033dc:	4603      	mov	r3, r0
 80033de:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033e0:	e003      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	74fb      	strb	r3, [r7, #19]
      break;
 80033e6:	e000      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 80033e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033ea:	7cfb      	ldrb	r3, [r7, #19]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d10b      	bne.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033f0:	4951      	ldr	r1, [pc, #324]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80033f2:	4b51      	ldr	r3, [pc, #324]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80033f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003400:	4313      	orrs	r3, r2
 8003402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003406:	e001      	b.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003408:	7cfb      	ldrb	r3, [r7, #19]
 800340a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003414:	2b00      	cmp	r3, #0
 8003416:	f000 809e 	beq.w	8003556 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 800341a:	2300      	movs	r3, #0
 800341c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800341e:	4b46      	ldr	r3, [pc, #280]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d101      	bne.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800342a:	2301      	movs	r3, #1
 800342c:	e000      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800342e:	2300      	movs	r3, #0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00d      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003434:	4a40      	ldr	r2, [pc, #256]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003436:	4b40      	ldr	r3, [pc, #256]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800343a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800343e:	6593      	str	r3, [r2, #88]	; 0x58
 8003440:	4b3d      	ldr	r3, [pc, #244]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003444:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003448:	60bb      	str	r3, [r7, #8]
 800344a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800344c:	2301      	movs	r3, #1
 800344e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003450:	4a3a      	ldr	r2, [pc, #232]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003452:	4b3a      	ldr	r3, [pc, #232]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800345a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800345c:	f7fd fd80 	bl	8000f60 <HAL_GetTick>
 8003460:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003462:	e009      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003464:	f7fd fd7c 	bl	8000f60 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d902      	bls.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	74fb      	strb	r3, [r7, #19]
        break;
 8003476:	e005      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003478:	4b30      	ldr	r3, [pc, #192]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003480:	2b00      	cmp	r3, #0
 8003482:	d0ef      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8003484:	7cfb      	ldrb	r3, [r7, #19]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d15a      	bne.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800348a:	4b2b      	ldr	r3, [pc, #172]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800348c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003490:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003494:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d01e      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d019      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80034a6:	4b24      	ldr	r3, [pc, #144]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80034a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034b0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80034b2:	4a21      	ldr	r2, [pc, #132]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80034b4:	4b20      	ldr	r3, [pc, #128]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80034b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034c2:	4a1d      	ldr	r2, [pc, #116]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80034c4:	4b1c      	ldr	r3, [pc, #112]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80034c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80034d2:	4a19      	ldr	r2, [pc, #100]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f003 0301 	and.w	r3, r3, #1
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d016      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e4:	f7fd fd3c 	bl	8000f60 <HAL_GetTick>
 80034e8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034ea:	e00b      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ec:	f7fd fd38 	bl	8000f60 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d902      	bls.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	74fb      	strb	r3, [r7, #19]
            break;
 8003502:	e006      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003504:	4b0c      	ldr	r3, [pc, #48]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d0ec      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8003512:	7cfb      	ldrb	r3, [r7, #19]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10b      	bne.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003518:	4907      	ldr	r1, [pc, #28]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800351a:	4b07      	ldr	r3, [pc, #28]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800351c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003520:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003528:	4313      	orrs	r3, r2
 800352a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800352e:	e009      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003530:	7cfb      	ldrb	r3, [r7, #19]
 8003532:	74bb      	strb	r3, [r7, #18]
 8003534:	e006      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8003536:	bf00      	nop
 8003538:	40021000 	.word	0x40021000
 800353c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003540:	7cfb      	ldrb	r3, [r7, #19]
 8003542:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003544:	7c7b      	ldrb	r3, [r7, #17]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d105      	bne.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800354a:	4aac      	ldr	r2, [pc, #688]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800354c:	4bab      	ldr	r3, [pc, #684]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800354e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003550:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003554:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00a      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003562:	49a6      	ldr	r1, [pc, #664]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003564:	4ba5      	ldr	r3, [pc, #660]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800356a:	f023 0203 	bic.w	r2, r3, #3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	4313      	orrs	r3, r2
 8003574:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00a      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003584:	499d      	ldr	r1, [pc, #628]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003586:	4b9d      	ldr	r3, [pc, #628]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800358c:	f023 020c 	bic.w	r2, r3, #12
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003594:	4313      	orrs	r3, r2
 8003596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0304 	and.w	r3, r3, #4
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00a      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80035a6:	4995      	ldr	r1, [pc, #596]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80035a8:	4b94      	ldr	r3, [pc, #592]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80035aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b6:	4313      	orrs	r3, r2
 80035b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0308 	and.w	r3, r3, #8
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00a      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80035c8:	498c      	ldr	r1, [pc, #560]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80035ca:	4b8c      	ldr	r3, [pc, #560]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80035cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d8:	4313      	orrs	r3, r2
 80035da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0320 	and.w	r3, r3, #32
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00a      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035ea:	4984      	ldr	r1, [pc, #528]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80035ec:	4b83      	ldr	r3, [pc, #524]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80035ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fa:	4313      	orrs	r3, r2
 80035fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00a      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800360c:	497b      	ldr	r1, [pc, #492]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800360e:	4b7b      	ldr	r3, [pc, #492]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003614:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800361c:	4313      	orrs	r3, r2
 800361e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00a      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800362e:	4973      	ldr	r1, [pc, #460]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003630:	4b72      	ldr	r3, [pc, #456]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003636:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800363e:	4313      	orrs	r3, r2
 8003640:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00a      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003650:	496a      	ldr	r1, [pc, #424]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003652:	4b6a      	ldr	r3, [pc, #424]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003658:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003660:	4313      	orrs	r3, r2
 8003662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00a      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003672:	4962      	ldr	r1, [pc, #392]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003674:	4b61      	ldr	r3, [pc, #388]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800367a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003682:	4313      	orrs	r3, r2
 8003684:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00a      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003694:	4959      	ldr	r1, [pc, #356]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003696:	4b59      	ldr	r3, [pc, #356]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800369c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a4:	4313      	orrs	r3, r2
 80036a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00a      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80036b6:	4951      	ldr	r1, [pc, #324]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80036b8:	4b50      	ldr	r3, [pc, #320]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80036ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036be:	f023 0203 	bic.w	r2, r3, #3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c6:	4313      	orrs	r3, r2
 80036c8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d028      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80036d8:	4948      	ldr	r1, [pc, #288]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80036da:	4b48      	ldr	r3, [pc, #288]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80036dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036e8:	4313      	orrs	r3, r2
 80036ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036f6:	d106      	bne.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x376>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036f8:	4a40      	ldr	r2, [pc, #256]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80036fa:	4b40      	ldr	r3, [pc, #256]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003702:	60d3      	str	r3, [r2, #12]
 8003704:	e011      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x39a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800370a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800370e:	d10c      	bne.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x39a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	3304      	adds	r3, #4
 8003714:	2101      	movs	r1, #1
 8003716:	4618      	mov	r0, r3
 8003718:	f000 f872 	bl	8003800 <RCCEx_PLLSAI1_Config>
 800371c:	4603      	mov	r3, r0
 800371e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003720:	7cfb      	ldrb	r3, [r7, #19]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x39a>
      {
        /* set overall return value */
        status = ret;
 8003726:	7cfb      	ldrb	r3, [r7, #19]
 8003728:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d028      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003736:	4931      	ldr	r1, [pc, #196]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003738:	4b30      	ldr	r3, [pc, #192]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800373a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800373e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003746:	4313      	orrs	r3, r2
 8003748:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003750:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003754:	d106      	bne.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003756:	4a29      	ldr	r2, [pc, #164]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003758:	4b28      	ldr	r3, [pc, #160]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003760:	60d3      	str	r3, [r2, #12]
 8003762:	e011      	b.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003768:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800376c:	d10c      	bne.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	3304      	adds	r3, #4
 8003772:	2101      	movs	r1, #1
 8003774:	4618      	mov	r0, r3
 8003776:	f000 f843 	bl	8003800 <RCCEx_PLLSAI1_Config>
 800377a:	4603      	mov	r3, r0
 800377c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800377e:	7cfb      	ldrb	r3, [r7, #19]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
      {
        /* set overall return value */
        status = ret;
 8003784:	7cfb      	ldrb	r3, [r7, #19]
 8003786:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d01c      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003794:	4919      	ldr	r1, [pc, #100]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003796:	4b19      	ldr	r3, [pc, #100]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800379c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a4:	4313      	orrs	r3, r2
 80037a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037b2:	d10c      	bne.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x43e>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	3304      	adds	r3, #4
 80037b8:	2102      	movs	r1, #2
 80037ba:	4618      	mov	r0, r3
 80037bc:	f000 f820 	bl	8003800 <RCCEx_PLLSAI1_Config>
 80037c0:	4603      	mov	r3, r0
 80037c2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037c4:	7cfb      	ldrb	r3, [r7, #19]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x43e>
      {
        /* set overall return value */
        status = ret;
 80037ca:	7cfb      	ldrb	r3, [r7, #19]
 80037cc:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00a      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037da:	4908      	ldr	r1, [pc, #32]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80037dc:	4b07      	ldr	r3, [pc, #28]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80037de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ea:	4313      	orrs	r3, r2
 80037ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80037f0:	7cbb      	ldrb	r3, [r7, #18]
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3718      	adds	r7, #24
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	40021000 	.word	0x40021000

08003800 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800380a:	2300      	movs	r3, #0
 800380c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800380e:	4b73      	ldr	r3, [pc, #460]	; (80039dc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	f003 0303 	and.w	r3, r3, #3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d018      	beq.n	800384c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800381a:	4b70      	ldr	r3, [pc, #448]	; (80039dc <RCCEx_PLLSAI1_Config+0x1dc>)
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	f003 0203 	and.w	r2, r3, #3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	429a      	cmp	r2, r3
 8003828:	d10d      	bne.n	8003846 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
       ||
 800382e:	2b00      	cmp	r3, #0
 8003830:	d009      	beq.n	8003846 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003832:	4b6a      	ldr	r3, [pc, #424]	; (80039dc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	091b      	lsrs	r3, r3, #4
 8003838:	f003 0307 	and.w	r3, r3, #7
 800383c:	1c5a      	adds	r2, r3, #1
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
       ||
 8003842:	429a      	cmp	r2, r3
 8003844:	d044      	beq.n	80038d0 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	73fb      	strb	r3, [r7, #15]
 800384a:	e041      	b.n	80038d0 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2b02      	cmp	r3, #2
 8003852:	d00c      	beq.n	800386e <RCCEx_PLLSAI1_Config+0x6e>
 8003854:	2b03      	cmp	r3, #3
 8003856:	d013      	beq.n	8003880 <RCCEx_PLLSAI1_Config+0x80>
 8003858:	2b01      	cmp	r3, #1
 800385a:	d120      	bne.n	800389e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800385c:	4b5f      	ldr	r3, [pc, #380]	; (80039dc <RCCEx_PLLSAI1_Config+0x1dc>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0302 	and.w	r3, r3, #2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d11d      	bne.n	80038a4 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800386c:	e01a      	b.n	80038a4 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800386e:	4b5b      	ldr	r3, [pc, #364]	; (80039dc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003876:	2b00      	cmp	r3, #0
 8003878:	d116      	bne.n	80038a8 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800387e:	e013      	b.n	80038a8 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003880:	4b56      	ldr	r3, [pc, #344]	; (80039dc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d10f      	bne.n	80038ac <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800388c:	4b53      	ldr	r3, [pc, #332]	; (80039dc <RCCEx_PLLSAI1_Config+0x1dc>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d109      	bne.n	80038ac <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800389c:	e006      	b.n	80038ac <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	73fb      	strb	r3, [r7, #15]
      break;
 80038a2:	e004      	b.n	80038ae <RCCEx_PLLSAI1_Config+0xae>
      break;
 80038a4:	bf00      	nop
 80038a6:	e002      	b.n	80038ae <RCCEx_PLLSAI1_Config+0xae>
      break;
 80038a8:	bf00      	nop
 80038aa:	e000      	b.n	80038ae <RCCEx_PLLSAI1_Config+0xae>
      break;
 80038ac:	bf00      	nop
    }

    if(status == HAL_OK)
 80038ae:	7bfb      	ldrb	r3, [r7, #15]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d10d      	bne.n	80038d0 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80038b4:	4849      	ldr	r0, [pc, #292]	; (80039dc <RCCEx_PLLSAI1_Config+0x1dc>)
 80038b6:	4b49      	ldr	r3, [pc, #292]	; (80039dc <RCCEx_PLLSAI1_Config+0x1dc>)
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6819      	ldr	r1, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	3b01      	subs	r3, #1
 80038c8:	011b      	lsls	r3, r3, #4
 80038ca:	430b      	orrs	r3, r1
 80038cc:	4313      	orrs	r3, r2
 80038ce:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80038d0:	7bfb      	ldrb	r3, [r7, #15]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d17c      	bne.n	80039d0 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80038d6:	4a41      	ldr	r2, [pc, #260]	; (80039dc <RCCEx_PLLSAI1_Config+0x1dc>)
 80038d8:	4b40      	ldr	r3, [pc, #256]	; (80039dc <RCCEx_PLLSAI1_Config+0x1dc>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80038e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038e2:	f7fd fb3d 	bl	8000f60 <HAL_GetTick>
 80038e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038e8:	e009      	b.n	80038fe <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038ea:	f7fd fb39 	bl	8000f60 <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d902      	bls.n	80038fe <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	73fb      	strb	r3, [r7, #15]
        break;
 80038fc:	e005      	b.n	800390a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038fe:	4b37      	ldr	r3, [pc, #220]	; (80039dc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1ef      	bne.n	80038ea <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800390a:	7bfb      	ldrb	r3, [r7, #15]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d15f      	bne.n	80039d0 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d110      	bne.n	8003938 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003916:	4831      	ldr	r0, [pc, #196]	; (80039dc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003918:	4b30      	ldr	r3, [pc, #192]	; (80039dc <RCCEx_PLLSAI1_Config+0x1dc>)
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003920:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	6892      	ldr	r2, [r2, #8]
 8003928:	0211      	lsls	r1, r2, #8
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	68d2      	ldr	r2, [r2, #12]
 800392e:	06d2      	lsls	r2, r2, #27
 8003930:	430a      	orrs	r2, r1
 8003932:	4313      	orrs	r3, r2
 8003934:	6103      	str	r3, [r0, #16]
 8003936:	e027      	b.n	8003988 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d112      	bne.n	8003964 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800393e:	4827      	ldr	r0, [pc, #156]	; (80039dc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003940:	4b26      	ldr	r3, [pc, #152]	; (80039dc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003948:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	6892      	ldr	r2, [r2, #8]
 8003950:	0211      	lsls	r1, r2, #8
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	6912      	ldr	r2, [r2, #16]
 8003956:	0852      	lsrs	r2, r2, #1
 8003958:	3a01      	subs	r2, #1
 800395a:	0552      	lsls	r2, r2, #21
 800395c:	430a      	orrs	r2, r1
 800395e:	4313      	orrs	r3, r2
 8003960:	6103      	str	r3, [r0, #16]
 8003962:	e011      	b.n	8003988 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003964:	481d      	ldr	r0, [pc, #116]	; (80039dc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003966:	4b1d      	ldr	r3, [pc, #116]	; (80039dc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800396e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	6892      	ldr	r2, [r2, #8]
 8003976:	0211      	lsls	r1, r2, #8
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	6952      	ldr	r2, [r2, #20]
 800397c:	0852      	lsrs	r2, r2, #1
 800397e:	3a01      	subs	r2, #1
 8003980:	0652      	lsls	r2, r2, #25
 8003982:	430a      	orrs	r2, r1
 8003984:	4313      	orrs	r3, r2
 8003986:	6103      	str	r3, [r0, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003988:	4a14      	ldr	r2, [pc, #80]	; (80039dc <RCCEx_PLLSAI1_Config+0x1dc>)
 800398a:	4b14      	ldr	r3, [pc, #80]	; (80039dc <RCCEx_PLLSAI1_Config+0x1dc>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003992:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003994:	f7fd fae4 	bl	8000f60 <HAL_GetTick>
 8003998:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800399a:	e009      	b.n	80039b0 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800399c:	f7fd fae0 	bl	8000f60 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d902      	bls.n	80039b0 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	73fb      	strb	r3, [r7, #15]
          break;
 80039ae:	e005      	b.n	80039bc <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039b0:	4b0a      	ldr	r3, [pc, #40]	; (80039dc <RCCEx_PLLSAI1_Config+0x1dc>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d0ef      	beq.n	800399c <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 80039bc:	7bfb      	ldrb	r3, [r7, #15]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d106      	bne.n	80039d0 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80039c2:	4906      	ldr	r1, [pc, #24]	; (80039dc <RCCEx_PLLSAI1_Config+0x1dc>)
 80039c4:	4b05      	ldr	r3, [pc, #20]	; (80039dc <RCCEx_PLLSAI1_Config+0x1dc>)
 80039c6:	691a      	ldr	r2, [r3, #16]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80039d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3710      	adds	r7, #16
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	40021000 	.word	0x40021000

080039e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e093      	b.n	8003b1a <HAL_SPI_Init+0x13a>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d108      	bne.n	8003a0c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a02:	d009      	beq.n	8003a18 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	61da      	str	r2, [r3, #28]
 8003a0a:	e005      	b.n	8003a18 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d106      	bne.n	8003a38 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f7fd f97e 	bl	8000d34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	6812      	ldr	r2, [r2, #0]
 8003a48:	6812      	ldr	r2, [r2, #0]
 8003a4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a4e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a58:	d902      	bls.n	8003a60 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	60fb      	str	r3, [r7, #12]
 8003a5e:	e002      	b.n	8003a66 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003a60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a64:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003a6e:	d007      	beq.n	8003a80 <HAL_SPI_Init+0xa0>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a78:	d002      	beq.n	8003a80 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	6852      	ldr	r2, [r2, #4]
 8003a88:	f402 7182 	and.w	r1, r2, #260	; 0x104
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	6892      	ldr	r2, [r2, #8]
 8003a90:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 8003a94:	4311      	orrs	r1, r2
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	6912      	ldr	r2, [r2, #16]
 8003a9a:	f002 0202 	and.w	r2, r2, #2
 8003a9e:	4311      	orrs	r1, r2
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	6952      	ldr	r2, [r2, #20]
 8003aa4:	f002 0201 	and.w	r2, r2, #1
 8003aa8:	4311      	orrs	r1, r2
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	6992      	ldr	r2, [r2, #24]
 8003aae:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003ab2:	4311      	orrs	r1, r2
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	69d2      	ldr	r2, [r2, #28]
 8003ab8:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8003abc:	4311      	orrs	r1, r2
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	6a12      	ldr	r2, [r2, #32]
 8003ac2:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003ac6:	4311      	orrs	r1, r2
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003acc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	6992      	ldr	r2, [r2, #24]
 8003adc:	0c12      	lsrs	r2, r2, #16
 8003ade:	f002 0104 	and.w	r1, r2, #4
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ae6:	f002 0210 	and.w	r2, r2, #16
 8003aea:	4311      	orrs	r1, r2
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003af0:	f002 0208 	and.w	r2, r2, #8
 8003af4:	4311      	orrs	r1, r2
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	68d2      	ldr	r2, [r2, #12]
 8003afa:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8003afe:	4311      	orrs	r1, r2
 8003b00:	68fa      	ldr	r2, [r7, #12]
 8003b02:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003b06:	430a      	orrs	r2, r1
 8003b08:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3710      	adds	r7, #16
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
	...

08003b24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003b24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b5c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003b28:	f7fd f97c 	bl	8000e24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003b2c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003b2e:	e003      	b.n	8003b38 <LoopCopyDataInit>

08003b30 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003b30:	4b0b      	ldr	r3, [pc, #44]	; (8003b60 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003b32:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003b34:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003b36:	3104      	adds	r1, #4

08003b38 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003b38:	480a      	ldr	r0, [pc, #40]	; (8003b64 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003b3a:	4b0b      	ldr	r3, [pc, #44]	; (8003b68 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003b3c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003b3e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003b40:	d3f6      	bcc.n	8003b30 <CopyDataInit>
	ldr	r2, =_sbss
 8003b42:	4a0a      	ldr	r2, [pc, #40]	; (8003b6c <LoopForever+0x12>)
	b	LoopFillZerobss
 8003b44:	e002      	b.n	8003b4c <LoopFillZerobss>

08003b46 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003b46:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003b48:	f842 3b04 	str.w	r3, [r2], #4

08003b4c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003b4c:	4b08      	ldr	r3, [pc, #32]	; (8003b70 <LoopForever+0x16>)
	cmp	r2, r3
 8003b4e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003b50:	d3f9      	bcc.n	8003b46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003b52:	f000 f811 	bl	8003b78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003b56:	f7fc fd28 	bl	80005aa <main>

08003b5a <LoopForever>:

LoopForever:
    b LoopForever
 8003b5a:	e7fe      	b.n	8003b5a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003b5c:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 8003b60:	08003c30 	.word	0x08003c30
	ldr	r0, =_sdata
 8003b64:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003b68:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8003b6c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8003b70:	20000170 	.word	0x20000170

08003b74 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003b74:	e7fe      	b.n	8003b74 <ADC1_IRQHandler>
	...

08003b78 <__libc_init_array>:
 8003b78:	b570      	push	{r4, r5, r6, lr}
 8003b7a:	4e0d      	ldr	r6, [pc, #52]	; (8003bb0 <__libc_init_array+0x38>)
 8003b7c:	4c0d      	ldr	r4, [pc, #52]	; (8003bb4 <__libc_init_array+0x3c>)
 8003b7e:	1ba4      	subs	r4, r4, r6
 8003b80:	10a4      	asrs	r4, r4, #2
 8003b82:	2500      	movs	r5, #0
 8003b84:	42a5      	cmp	r5, r4
 8003b86:	d109      	bne.n	8003b9c <__libc_init_array+0x24>
 8003b88:	4e0b      	ldr	r6, [pc, #44]	; (8003bb8 <__libc_init_array+0x40>)
 8003b8a:	4c0c      	ldr	r4, [pc, #48]	; (8003bbc <__libc_init_array+0x44>)
 8003b8c:	f000 f820 	bl	8003bd0 <_init>
 8003b90:	1ba4      	subs	r4, r4, r6
 8003b92:	10a4      	asrs	r4, r4, #2
 8003b94:	2500      	movs	r5, #0
 8003b96:	42a5      	cmp	r5, r4
 8003b98:	d105      	bne.n	8003ba6 <__libc_init_array+0x2e>
 8003b9a:	bd70      	pop	{r4, r5, r6, pc}
 8003b9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ba0:	4798      	blx	r3
 8003ba2:	3501      	adds	r5, #1
 8003ba4:	e7ee      	b.n	8003b84 <__libc_init_array+0xc>
 8003ba6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003baa:	4798      	blx	r3
 8003bac:	3501      	adds	r5, #1
 8003bae:	e7f2      	b.n	8003b96 <__libc_init_array+0x1e>
 8003bb0:	08003c28 	.word	0x08003c28
 8003bb4:	08003c28 	.word	0x08003c28
 8003bb8:	08003c28 	.word	0x08003c28
 8003bbc:	08003c2c 	.word	0x08003c2c

08003bc0 <memset>:
 8003bc0:	4402      	add	r2, r0
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d100      	bne.n	8003bca <memset+0xa>
 8003bc8:	4770      	bx	lr
 8003bca:	f803 1b01 	strb.w	r1, [r3], #1
 8003bce:	e7f9      	b.n	8003bc4 <memset+0x4>

08003bd0 <_init>:
 8003bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bd2:	bf00      	nop
 8003bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bd6:	bc08      	pop	{r3}
 8003bd8:	469e      	mov	lr, r3
 8003bda:	4770      	bx	lr

08003bdc <_fini>:
 8003bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bde:	bf00      	nop
 8003be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003be2:	bc08      	pop	{r3}
 8003be4:	469e      	mov	lr, r3
 8003be6:	4770      	bx	lr
